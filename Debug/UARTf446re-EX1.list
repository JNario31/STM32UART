
UARTf446re-EX1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e7c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800304c  0800304c  0000404c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003294  08003294  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003294  08003294  00004294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800329c  0800329c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800329c  0800329c  0000429c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032a0  080032a0  000042a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080032a4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  08003300  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08003300  00005210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e37  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015b1  00000000  00000000  0000cec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0000e478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000537  00000000  00000000  0000eb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021044  00000000  00000000  0000f087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c9f  00000000  00000000  000300cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c878b  00000000  00000000  00038d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001014f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002098  00000000  00000000  00101538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001035d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003034 	.word	0x08003034

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08003034 	.word	0x08003034

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint8_t opt = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fab9 	bl	8000b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f813 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f89b 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000602:	f000 f86f 	bl	80006e4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

printMessage:

	printWelcomeMessage();
 8000606:	f000 f8e9 	bl	80007dc <printWelcomeMessage>

	while (1)  {
	  opt = readUserInput();
 800060a:	f000 f911 	bl	8000830 <readUserInput>
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	  processUserInput(opt);
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f92b 	bl	8000870 <processUserInput>
	  if(opt == 3)
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b03      	cmp	r3, #3
 800061e:	d1f4      	bne.n	800060a <main+0x1e>
		goto printMessage;
 8000620:	e7f1      	b.n	8000606 <main+0x1a>
	...

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	@ 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2234      	movs	r2, #52	@ 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f002 f880 	bl	8002738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <SystemClock_Config+0xb8>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	4a22      	ldr	r2, [pc, #136]	@ (80006dc <SystemClock_Config+0xb8>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	@ 0x40
 8000658:	4b20      	ldr	r3, [pc, #128]	@ (80006dc <SystemClock_Config+0xb8>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	4b1d      	ldr	r3, [pc, #116]	@ (80006e0 <SystemClock_Config+0xbc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000670:	4a1b      	ldr	r2, [pc, #108]	@ (80006e0 <SystemClock_Config+0xbc>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <SystemClock_Config+0xbc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000690:	2300      	movs	r3, #0
 8000692:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4618      	mov	r0, r3
 800069a:	f001 f863 	bl	8001764 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006a4:	f000 f94a 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fd8a 	bl	80011dc <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ce:	f000 f935 	bl	800093c <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	@ 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	@ (8000734 <MX_USART2_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ee:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 800071c:	f001 fac0 	bl	8001ca0 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000726:	f000 f909 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000078 	.word	0x20000078
 8000734:	40004400 	.word	0x40004400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <MX_GPIO_Init+0x98>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a1e      	ldr	r2, [pc, #120]	@ (80007d0 <MX_GPIO_Init+0x98>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <MX_GPIO_Init+0x98>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <MX_GPIO_Init+0x98>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a17      	ldr	r2, [pc, #92]	@ (80007d0 <MX_GPIO_Init+0x98>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <MX_GPIO_Init+0x98>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2120      	movs	r1, #32
 800078a:	4812      	ldr	r0, [pc, #72]	@ (80007d4 <MX_GPIO_Init+0x9c>)
 800078c:	f000 fcf2 	bl	8001174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Pin */
  GPIO_InitStruct.Pin = Blue_Pin;
 8000790:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	4619      	mov	r1, r3
 80007a4:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <MX_GPIO_Init+0xa0>)
 80007a6:	f000 fb39 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007aa:	2320      	movs	r3, #32
 80007ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	4619      	mov	r1, r3
 80007c0:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <MX_GPIO_Init+0x9c>)
 80007c2:	f000 fb2b 	bl	8000e1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007c6:	bf00      	nop
 80007c8:	3720      	adds	r7, #32
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40020800 	.word	0x40020800

080007dc <printWelcomeMessage>:

/* USER CODE BEGIN 4 */
void printWelcomeMessage(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[0;0H", strlen("\033[0;0H"), HAL_MAX_DELAY);
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007e4:	2206      	movs	r2, #6
 80007e6:	490d      	ldr	r1, [pc, #52]	@ (800081c <printWelcomeMessage+0x40>)
 80007e8:	480d      	ldr	r0, [pc, #52]	@ (8000820 <printWelcomeMessage+0x44>)
 80007ea:	f001 faa9 	bl	8001d40 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[2J", strlen("\033[2J"), HAL_MAX_DELAY);
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007f2:	2204      	movs	r2, #4
 80007f4:	490b      	ldr	r1, [pc, #44]	@ (8000824 <printWelcomeMessage+0x48>)
 80007f6:	480a      	ldr	r0, [pc, #40]	@ (8000820 <printWelcomeMessage+0x44>)
 80007f8:	f001 faa2 	bl	8001d40 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000800:	222a      	movs	r2, #42	@ 0x2a
 8000802:	4909      	ldr	r1, [pc, #36]	@ (8000828 <printWelcomeMessage+0x4c>)
 8000804:	4806      	ldr	r0, [pc, #24]	@ (8000820 <printWelcomeMessage+0x44>)
 8000806:	f001 fa9b 	bl	8001d40 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 800080a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800080e:	2283      	movs	r2, #131	@ 0x83
 8000810:	4906      	ldr	r1, [pc, #24]	@ (800082c <printWelcomeMessage+0x50>)
 8000812:	4803      	ldr	r0, [pc, #12]	@ (8000820 <printWelcomeMessage+0x44>)
 8000814:	f001 fa94 	bl	8001d40 <HAL_UART_Transmit>
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	0800304c 	.word	0x0800304c
 8000820:	20000078 	.word	0x20000078
 8000824:	08003054 	.word	0x08003054
 8000828:	0800305c 	.word	0x0800305c
 800082c:	08003088 	.word	0x08003088

08000830 <readUserInput>:

uint8_t readUserInput(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
	char readBuf[1];

	HAL_UART_Transmit(&huart2, (uint8_t*)PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 8000836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800083a:	2204      	movs	r2, #4
 800083c:	490a      	ldr	r1, [pc, #40]	@ (8000868 <readUserInput+0x38>)
 800083e:	480b      	ldr	r0, [pc, #44]	@ (800086c <readUserInput+0x3c>)
 8000840:	f001 fa7e 	bl	8001d40 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
 8000844:	1d39      	adds	r1, r7, #4
 8000846:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800084a:	2201      	movs	r2, #1
 800084c:	4807      	ldr	r0, [pc, #28]	@ (800086c <readUserInput+0x3c>)
 800084e:	f001 fb02 	bl	8001e56 <HAL_UART_Receive>
	return atoi(readBuf);
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4618      	mov	r0, r3
 8000856:	f001 fec5 	bl	80025e4 <atoi>
 800085a:	4603      	mov	r3, r0
 800085c:	b2db      	uxtb	r3, r3
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	0800310c 	.word	0x0800310c
 800086c:	20000078 	.word	0x20000078

08000870 <processUserInput>:

uint8_t processUserInput(uint8_t opt) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	@ 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  char msg[30];

  if(!opt || opt > 3)
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d002      	beq.n	8000886 <processUserInput+0x16>
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b03      	cmp	r3, #3
 8000884:	d901      	bls.n	800088a <processUserInput+0x1a>
    return 0;
 8000886:	2300      	movs	r3, #0
 8000888:	e046      	b.n	8000918 <processUserInput+0xa8>

  sprintf(msg, "%d", opt);
 800088a:	79fa      	ldrb	r2, [r7, #7]
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	4923      	ldr	r1, [pc, #140]	@ (8000920 <processUserInput+0xb0>)
 8000892:	4618      	mov	r0, r3
 8000894:	f001 feaa 	bl	80025ec <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fcb7 	bl	8000210 <strlen>
 80008a2:	4603      	mov	r3, r0
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	f107 0108 	add.w	r1, r7, #8
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008ae:	481d      	ldr	r0, [pc, #116]	@ (8000924 <processUserInput+0xb4>)
 80008b0:	f001 fa46 	bl	8001d40 <HAL_UART_Transmit>

  switch(opt) {
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d02b      	beq.n	8000912 <processUserInput+0xa2>
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	dc2b      	bgt.n	8000916 <processUserInput+0xa6>
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d002      	beq.n	80008c8 <processUserInput+0x58>
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d005      	beq.n	80008d2 <processUserInput+0x62>
 80008c6:	e026      	b.n	8000916 <processUserInput+0xa6>
  case 1:
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008c8:	2120      	movs	r1, #32
 80008ca:	4817      	ldr	r0, [pc, #92]	@ (8000928 <processUserInput+0xb8>)
 80008cc:	f000 fc6b 	bl	80011a6 <HAL_GPIO_TogglePin>
    break;
 80008d0:	e021      	b.n	8000916 <processUserInput+0xa6>
  case 2:
    sprintf(msg, "\r\nUSER BUTTON status: %s", HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET ? "PRESSED" : "RELEASED");
 80008d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008d6:	4815      	ldr	r0, [pc, #84]	@ (800092c <processUserInput+0xbc>)
 80008d8:	f000 fc34 	bl	8001144 <HAL_GPIO_ReadPin>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d101      	bne.n	80008e6 <processUserInput+0x76>
 80008e2:	4a13      	ldr	r2, [pc, #76]	@ (8000930 <processUserInput+0xc0>)
 80008e4:	e000      	b.n	80008e8 <processUserInput+0x78>
 80008e6:	4a13      	ldr	r2, [pc, #76]	@ (8000934 <processUserInput+0xc4>)
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	4912      	ldr	r1, [pc, #72]	@ (8000938 <processUserInput+0xc8>)
 80008ee:	4618      	mov	r0, r3
 80008f0:	f001 fe7c 	bl	80025ec <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fc89 	bl	8000210 <strlen>
 80008fe:	4603      	mov	r3, r0
 8000900:	b29a      	uxth	r2, r3
 8000902:	f107 0108 	add.w	r1, r7, #8
 8000906:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800090a:	4806      	ldr	r0, [pc, #24]	@ (8000924 <processUserInput+0xb4>)
 800090c:	f001 fa18 	bl	8001d40 <HAL_UART_Transmit>
    break;
 8000910:	e001      	b.n	8000916 <processUserInput+0xa6>
  case 3:
    return 2;
 8000912:	2302      	movs	r3, #2
 8000914:	e000      	b.n	8000918 <processUserInput+0xa8>
  };

  return 1;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3728      	adds	r7, #40	@ 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	08003114 	.word	0x08003114
 8000924:	20000078 	.word	0x20000078
 8000928:	40020000 	.word	0x40020000
 800092c:	40020800 	.word	0x40020800
 8000930:	08003118 	.word	0x08003118
 8000934:	08003120 	.word	0x08003120
 8000938:	0800312c 	.word	0x0800312c

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <Error_Handler+0x8>

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000956:	4a0f      	ldr	r2, [pc, #60]	@ (8000994 <HAL_MspInit+0x4c>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800095c:	6453      	str	r3, [r2, #68]	@ 0x44
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	4a08      	ldr	r2, [pc, #32]	@ (8000994 <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	@ 0x40
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a19      	ldr	r2, [pc, #100]	@ (8000a1c <HAL_UART_MspInit+0x84>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d12b      	bne.n	8000a12 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <HAL_UART_MspInit+0x88>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	4a17      	ldr	r2, [pc, #92]	@ (8000a20 <HAL_UART_MspInit+0x88>)
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <HAL_UART_MspInit+0x88>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <HAL_UART_MspInit+0x88>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a10      	ldr	r2, [pc, #64]	@ (8000a20 <HAL_UART_MspInit+0x88>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <HAL_UART_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f2:	230c      	movs	r3, #12
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a02:	2307      	movs	r3, #7
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <HAL_UART_MspInit+0x8c>)
 8000a0e:	f000 fa05 	bl	8000e1c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	@ 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40004400 	.word	0x40004400
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <NMI_Handler+0x4>

08000a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <MemManage_Handler+0x4>

08000a40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7e:	f000 f8c7 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a90:	4a14      	ldr	r2, [pc, #80]	@ (8000ae4 <_sbrk+0x5c>)
 8000a92:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <_sbrk+0x60>)
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a9c:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d102      	bne.n	8000aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <_sbrk+0x64>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <_sbrk+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d207      	bcs.n	8000ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab8:	f001 fe46 	bl	8002748 <__errno>
 8000abc:	4603      	mov	r3, r0
 8000abe:	220c      	movs	r2, #12
 8000ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ac6:	e009      	b.n	8000adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ace:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a05      	ldr	r2, [pc, #20]	@ (8000aec <_sbrk+0x64>)
 8000ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ada:	68fb      	ldr	r3, [r7, #12]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20020000 	.word	0x20020000
 8000ae8:	00000400 	.word	0x00000400
 8000aec:	200000c0 	.word	0x200000c0
 8000af0:	20000210 	.word	0x20000210

08000af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <SystemInit+0x20>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afe:	4a05      	ldr	r2, [pc, #20]	@ (8000b14 <SystemInit+0x20>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b1c:	f7ff ffea 	bl	8000af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b20:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b22:	490d      	ldr	r1, [pc, #52]	@ (8000b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b24:	4a0d      	ldr	r2, [pc, #52]	@ (8000b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b38:	4c0a      	ldr	r4, [pc, #40]	@ (8000b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b46:	f001 fe05 	bl	8002754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4a:	f7ff fd4f 	bl	80005ec <main>
  bx  lr    
 8000b4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b5c:	080032a4 	.word	0x080032a4
  ldr r2, =_sbss
 8000b60:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b64:	20000210 	.word	0x20000210

08000b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC_IRQHandler>
	...

08000b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b70:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0d      	ldr	r2, [pc, #52]	@ (8000bac <HAL_Init+0x40>)
 8000b76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <HAL_Init+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <HAL_Init+0x40>)
 8000b82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <HAL_Init+0x40>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a07      	ldr	r2, [pc, #28]	@ (8000bac <HAL_Init+0x40>)
 8000b8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 f90d 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9a:	200f      	movs	r0, #15
 8000b9c:	f000 f808 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba0:	f7ff fed2 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023c00 	.word	0x40023c00

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb8:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <HAL_InitTick+0x54>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <HAL_InitTick+0x58>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f917 	bl	8000e02 <HAL_SYSTICK_Config>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00e      	b.n	8000bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d80a      	bhi.n	8000bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bec:	f000 f8ed 	bl	8000dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf0:	4a06      	ldr	r2, [pc, #24]	@ (8000c0c <HAL_InitTick+0x5c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e000      	b.n	8000bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	200000c4 	.word	0x200000c4

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	@ (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	200000c4 	.word	0x200000c4

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	@ (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	@ (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	@ 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d94:	f7ff ff8e 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff47 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ddc:	f7ff ff5c 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff8e 	bl	8000d08 <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5d 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ffb0 	bl	8000d70 <SysTick_Config>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	@ 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
 8000e36:	e165      	b.n	8001104 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	f040 8154 	bne.w	80010fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d005      	beq.n	8000e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d130      	bne.n	8000ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	68da      	ldr	r2, [r3, #12]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	091b      	lsrs	r3, r3, #4
 8000eba:	f003 0201 	and.w	r2, r3, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	d017      	beq.n	8000f0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d123      	bne.n	8000f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	08da      	lsrs	r2, r3, #3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3208      	adds	r2, #8
 8000f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	691a      	ldr	r2, [r3, #16]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	08da      	lsrs	r2, r3, #3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3208      	adds	r2, #8
 8000f5a:	69b9      	ldr	r1, [r7, #24]
 8000f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0203 	and.w	r2, r3, #3
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 80ae 	beq.w	80010fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b5d      	ldr	r3, [pc, #372]	@ (800111c <HAL_GPIO_Init+0x300>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	4a5c      	ldr	r2, [pc, #368]	@ (800111c <HAL_GPIO_Init+0x300>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fb2:	4b5a      	ldr	r3, [pc, #360]	@ (800111c <HAL_GPIO_Init+0x300>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fbe:	4a58      	ldr	r2, [pc, #352]	@ (8001120 <HAL_GPIO_Init+0x304>)
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4f      	ldr	r2, [pc, #316]	@ (8001124 <HAL_GPIO_Init+0x308>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d025      	beq.n	8001036 <HAL_GPIO_Init+0x21a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4e      	ldr	r2, [pc, #312]	@ (8001128 <HAL_GPIO_Init+0x30c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d01f      	beq.n	8001032 <HAL_GPIO_Init+0x216>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4d      	ldr	r2, [pc, #308]	@ (800112c <HAL_GPIO_Init+0x310>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d019      	beq.n	800102e <HAL_GPIO_Init+0x212>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4c      	ldr	r2, [pc, #304]	@ (8001130 <HAL_GPIO_Init+0x314>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0x20e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4b      	ldr	r2, [pc, #300]	@ (8001134 <HAL_GPIO_Init+0x318>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00d      	beq.n	8001026 <HAL_GPIO_Init+0x20a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4a      	ldr	r2, [pc, #296]	@ (8001138 <HAL_GPIO_Init+0x31c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d007      	beq.n	8001022 <HAL_GPIO_Init+0x206>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a49      	ldr	r2, [pc, #292]	@ (800113c <HAL_GPIO_Init+0x320>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_GPIO_Init+0x202>
 800101a:	2306      	movs	r3, #6
 800101c:	e00c      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 800101e:	2307      	movs	r3, #7
 8001020:	e00a      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 8001022:	2305      	movs	r3, #5
 8001024:	e008      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 8001026:	2304      	movs	r3, #4
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 800102a:	2303      	movs	r3, #3
 800102c:	e004      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 800102e:	2302      	movs	r3, #2
 8001030:	e002      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 8001036:	2300      	movs	r3, #0
 8001038:	69fa      	ldr	r2, [r7, #28]
 800103a:	f002 0203 	and.w	r2, r2, #3
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	4093      	lsls	r3, r2
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001048:	4935      	ldr	r1, [pc, #212]	@ (8001120 <HAL_GPIO_Init+0x304>)
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3302      	adds	r3, #2
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001056:	4b3a      	ldr	r3, [pc, #232]	@ (8001140 <HAL_GPIO_Init+0x324>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800107a:	4a31      	ldr	r2, [pc, #196]	@ (8001140 <HAL_GPIO_Init+0x324>)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001080:	4b2f      	ldr	r3, [pc, #188]	@ (8001140 <HAL_GPIO_Init+0x324>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a4:	4a26      	ldr	r2, [pc, #152]	@ (8001140 <HAL_GPIO_Init+0x324>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010aa:	4b25      	ldr	r3, [pc, #148]	@ (8001140 <HAL_GPIO_Init+0x324>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001140 <HAL_GPIO_Init+0x324>)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <HAL_GPIO_Init+0x324>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f8:	4a11      	ldr	r2, [pc, #68]	@ (8001140 <HAL_GPIO_Init+0x324>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3301      	adds	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	2b0f      	cmp	r3, #15
 8001108:	f67f ae96 	bls.w	8000e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3724      	adds	r7, #36	@ 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40013800 	.word	0x40013800
 8001124:	40020000 	.word	0x40020000
 8001128:	40020400 	.word	0x40020400
 800112c:	40020800 	.word	0x40020800
 8001130:	40020c00 	.word	0x40020c00
 8001134:	40021000 	.word	0x40021000
 8001138:	40021400 	.word	0x40021400
 800113c:	40021800 	.word	0x40021800
 8001140:	40013c00 	.word	0x40013c00

08001144 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	887b      	ldrh	r3, [r7, #2]
 8001156:	4013      	ands	r3, r2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800115c:	2301      	movs	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	e001      	b.n	8001166 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001166:	7bfb      	ldrb	r3, [r7, #15]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	807b      	strh	r3, [r7, #2]
 8001180:	4613      	mov	r3, r2
 8001182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001184:	787b      	ldrb	r3, [r7, #1]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001190:	e003      	b.n	800119a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	041a      	lsls	r2, r3, #16
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	619a      	str	r2, [r3, #24]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b085      	sub	sp, #20
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	460b      	mov	r3, r1
 80011b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011b8:	887a      	ldrh	r2, [r7, #2]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4013      	ands	r3, r2
 80011be:	041a      	lsls	r2, r3, #16
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	887b      	ldrh	r3, [r7, #2]
 80011c6:	400b      	ands	r3, r1
 80011c8:	431a      	orrs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	619a      	str	r2, [r3, #24]
}
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0cc      	b.n	800138a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011f0:	4b68      	ldr	r3, [pc, #416]	@ (8001394 <HAL_RCC_ClockConfig+0x1b8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 030f 	and.w	r3, r3, #15
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d90c      	bls.n	8001218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fe:	4b65      	ldr	r3, [pc, #404]	@ (8001394 <HAL_RCC_ClockConfig+0x1b8>)
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001206:	4b63      	ldr	r3, [pc, #396]	@ (8001394 <HAL_RCC_ClockConfig+0x1b8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d001      	beq.n	8001218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0b8      	b.n	800138a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d020      	beq.n	8001266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001230:	4b59      	ldr	r3, [pc, #356]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	4a58      	ldr	r2, [pc, #352]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 8001236:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800123a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001248:	4b53      	ldr	r3, [pc, #332]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	4a52      	ldr	r2, [pc, #328]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001254:	4b50      	ldr	r3, [pc, #320]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	494d      	ldr	r1, [pc, #308]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	4313      	orrs	r3, r2
 8001264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d044      	beq.n	80012fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d107      	bne.n	800128a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127a:	4b47      	ldr	r3, [pc, #284]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d119      	bne.n	80012ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e07f      	b.n	800138a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d003      	beq.n	800129a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001296:	2b03      	cmp	r3, #3
 8001298:	d107      	bne.n	80012aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800129a:	4b3f      	ldr	r3, [pc, #252]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d109      	bne.n	80012ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e06f      	b.n	800138a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e067      	b.n	800138a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ba:	4b37      	ldr	r3, [pc, #220]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f023 0203 	bic.w	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	4934      	ldr	r1, [pc, #208]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012cc:	f7ff fcb4 	bl	8000c38 <HAL_GetTick>
 80012d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d2:	e00a      	b.n	80012ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d4:	f7ff fcb0 	bl	8000c38 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e04f      	b.n	800138a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 020c 	and.w	r2, r3, #12
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d1eb      	bne.n	80012d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012fc:	4b25      	ldr	r3, [pc, #148]	@ (8001394 <HAL_RCC_ClockConfig+0x1b8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 030f 	and.w	r3, r3, #15
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d20c      	bcs.n	8001324 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800130a:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <HAL_RCC_ClockConfig+0x1b8>)
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001312:	4b20      	ldr	r3, [pc, #128]	@ (8001394 <HAL_RCC_ClockConfig+0x1b8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d001      	beq.n	8001324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e032      	b.n	800138a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	d008      	beq.n	8001342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001330:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	4916      	ldr	r1, [pc, #88]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 800133e:	4313      	orrs	r3, r2
 8001340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d009      	beq.n	8001362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800134e:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	490e      	ldr	r1, [pc, #56]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 800135e:	4313      	orrs	r3, r2
 8001360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001362:	f000 f855 	bl	8001410 <HAL_RCC_GetSysClockFreq>
 8001366:	4602      	mov	r2, r0
 8001368:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	490a      	ldr	r1, [pc, #40]	@ (800139c <HAL_RCC_ClockConfig+0x1c0>)
 8001374:	5ccb      	ldrb	r3, [r1, r3]
 8001376:	fa22 f303 	lsr.w	r3, r2, r3
 800137a:	4a09      	ldr	r2, [pc, #36]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 800137c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800137e:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fc14 	bl	8000bb0 <HAL_InitTick>

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023c00 	.word	0x40023c00
 8001398:	40023800 	.word	0x40023800
 800139c:	08003148 	.word	0x08003148
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000004 	.word	0x20000004

080013a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013ac:	4b03      	ldr	r3, [pc, #12]	@ (80013bc <HAL_RCC_GetHCLKFreq+0x14>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000000 	.word	0x20000000

080013c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013c4:	f7ff fff0 	bl	80013a8 <HAL_RCC_GetHCLKFreq>
 80013c8:	4602      	mov	r2, r0
 80013ca:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	0a9b      	lsrs	r3, r3, #10
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	4903      	ldr	r1, [pc, #12]	@ (80013e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013d6:	5ccb      	ldrb	r3, [r1, r3]
 80013d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013dc:	4618      	mov	r0, r3
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40023800 	.word	0x40023800
 80013e4:	08003158 	.word	0x08003158

080013e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013ec:	f7ff ffdc 	bl	80013a8 <HAL_RCC_GetHCLKFreq>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	0b5b      	lsrs	r3, r3, #13
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	4903      	ldr	r1, [pc, #12]	@ (800140c <HAL_RCC_GetPCLK2Freq+0x24>)
 80013fe:	5ccb      	ldrb	r3, [r1, r3]
 8001400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001404:	4618      	mov	r0, r3
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800
 800140c:	08003158 	.word	0x08003158

08001410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001414:	b0a6      	sub	sp, #152	@ 0x98
 8001416:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001436:	4bc8      	ldr	r3, [pc, #800]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x348>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b0c      	cmp	r3, #12
 8001440:	f200 817e 	bhi.w	8001740 <HAL_RCC_GetSysClockFreq+0x330>
 8001444:	a201      	add	r2, pc, #4	@ (adr r2, 800144c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144a:	bf00      	nop
 800144c:	08001481 	.word	0x08001481
 8001450:	08001741 	.word	0x08001741
 8001454:	08001741 	.word	0x08001741
 8001458:	08001741 	.word	0x08001741
 800145c:	08001489 	.word	0x08001489
 8001460:	08001741 	.word	0x08001741
 8001464:	08001741 	.word	0x08001741
 8001468:	08001741 	.word	0x08001741
 800146c:	08001491 	.word	0x08001491
 8001470:	08001741 	.word	0x08001741
 8001474:	08001741 	.word	0x08001741
 8001478:	08001741 	.word	0x08001741
 800147c:	080015fb 	.word	0x080015fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001480:	4bb6      	ldr	r3, [pc, #728]	@ (800175c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001482:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001486:	e15f      	b.n	8001748 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001488:	4bb5      	ldr	r3, [pc, #724]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x350>)
 800148a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800148e:	e15b      	b.n	8001748 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001490:	4bb1      	ldr	r3, [pc, #708]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x348>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001498:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800149c:	4bae      	ldr	r3, [pc, #696]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x348>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d031      	beq.n	800150c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014a8:	4bab      	ldr	r3, [pc, #684]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x348>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	099b      	lsrs	r3, r3, #6
 80014ae:	2200      	movs	r2, #0
 80014b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80014b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80014b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80014bc:	2300      	movs	r3, #0
 80014be:	667b      	str	r3, [r7, #100]	@ 0x64
 80014c0:	4ba7      	ldr	r3, [pc, #668]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x350>)
 80014c2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80014c6:	462a      	mov	r2, r5
 80014c8:	fb03 f202 	mul.w	r2, r3, r2
 80014cc:	2300      	movs	r3, #0
 80014ce:	4621      	mov	r1, r4
 80014d0:	fb01 f303 	mul.w	r3, r1, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	4aa2      	ldr	r2, [pc, #648]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x350>)
 80014d8:	4621      	mov	r1, r4
 80014da:	fba1 1202 	umull	r1, r2, r1, r2
 80014de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80014e0:	460a      	mov	r2, r1
 80014e2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80014e4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80014e6:	4413      	add	r3, r2
 80014e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014ee:	2200      	movs	r2, #0
 80014f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80014f2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80014f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80014f8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80014fc:	f7fe fee0 	bl	80002c0 <__aeabi_uldivmod>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4613      	mov	r3, r2
 8001506:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800150a:	e064      	b.n	80015d6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800150c:	4b92      	ldr	r3, [pc, #584]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x348>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	099b      	lsrs	r3, r3, #6
 8001512:	2200      	movs	r2, #0
 8001514:	653b      	str	r3, [r7, #80]	@ 0x50
 8001516:	657a      	str	r2, [r7, #84]	@ 0x54
 8001518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800151a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800151e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001520:	2300      	movs	r3, #0
 8001522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001524:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001528:	4622      	mov	r2, r4
 800152a:	462b      	mov	r3, r5
 800152c:	f04f 0000 	mov.w	r0, #0
 8001530:	f04f 0100 	mov.w	r1, #0
 8001534:	0159      	lsls	r1, r3, #5
 8001536:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800153a:	0150      	lsls	r0, r2, #5
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4621      	mov	r1, r4
 8001542:	1a51      	subs	r1, r2, r1
 8001544:	6139      	str	r1, [r7, #16]
 8001546:	4629      	mov	r1, r5
 8001548:	eb63 0301 	sbc.w	r3, r3, r1
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800155a:	4659      	mov	r1, fp
 800155c:	018b      	lsls	r3, r1, #6
 800155e:	4651      	mov	r1, sl
 8001560:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001564:	4651      	mov	r1, sl
 8001566:	018a      	lsls	r2, r1, #6
 8001568:	4651      	mov	r1, sl
 800156a:	ebb2 0801 	subs.w	r8, r2, r1
 800156e:	4659      	mov	r1, fp
 8001570:	eb63 0901 	sbc.w	r9, r3, r1
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001580:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001584:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001588:	4690      	mov	r8, r2
 800158a:	4699      	mov	r9, r3
 800158c:	4623      	mov	r3, r4
 800158e:	eb18 0303 	adds.w	r3, r8, r3
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	462b      	mov	r3, r5
 8001596:	eb49 0303 	adc.w	r3, r9, r3
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80015a8:	4629      	mov	r1, r5
 80015aa:	028b      	lsls	r3, r1, #10
 80015ac:	4621      	mov	r1, r4
 80015ae:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015b2:	4621      	mov	r1, r4
 80015b4:	028a      	lsls	r2, r1, #10
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015be:	2200      	movs	r2, #0
 80015c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80015c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80015c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80015c8:	f7fe fe7a 	bl	80002c0 <__aeabi_uldivmod>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4613      	mov	r3, r2
 80015d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80015d6:	4b60      	ldr	r3, [pc, #384]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x348>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	0c1b      	lsrs	r3, r3, #16
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	3301      	adds	r3, #1
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80015e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80015ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80015f8:	e0a6      	b.n	8001748 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015fa:	4b57      	ldr	r3, [pc, #348]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x348>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001602:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001606:	4b54      	ldr	r3, [pc, #336]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x348>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d02a      	beq.n	8001668 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001612:	4b51      	ldr	r3, [pc, #324]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x348>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	099b      	lsrs	r3, r3, #6
 8001618:	2200      	movs	r2, #0
 800161a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800161c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800161e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001620:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001624:	2100      	movs	r1, #0
 8001626:	4b4e      	ldr	r3, [pc, #312]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x350>)
 8001628:	fb03 f201 	mul.w	r2, r3, r1
 800162c:	2300      	movs	r3, #0
 800162e:	fb00 f303 	mul.w	r3, r0, r3
 8001632:	4413      	add	r3, r2
 8001634:	4a4a      	ldr	r2, [pc, #296]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x350>)
 8001636:	fba0 1202 	umull	r1, r2, r0, r2
 800163a:	677a      	str	r2, [r7, #116]	@ 0x74
 800163c:	460a      	mov	r2, r1
 800163e:	673a      	str	r2, [r7, #112]	@ 0x70
 8001640:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001642:	4413      	add	r3, r2
 8001644:	677b      	str	r3, [r7, #116]	@ 0x74
 8001646:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800164a:	2200      	movs	r2, #0
 800164c:	633b      	str	r3, [r7, #48]	@ 0x30
 800164e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001650:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001654:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001658:	f7fe fe32 	bl	80002c0 <__aeabi_uldivmod>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4613      	mov	r3, r2
 8001662:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001666:	e05b      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001668:	4b3b      	ldr	r3, [pc, #236]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x348>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	099b      	lsrs	r3, r3, #6
 800166e:	2200      	movs	r2, #0
 8001670:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001672:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800167a:	623b      	str	r3, [r7, #32]
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001680:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001684:	4642      	mov	r2, r8
 8001686:	464b      	mov	r3, r9
 8001688:	f04f 0000 	mov.w	r0, #0
 800168c:	f04f 0100 	mov.w	r1, #0
 8001690:	0159      	lsls	r1, r3, #5
 8001692:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001696:	0150      	lsls	r0, r2, #5
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4641      	mov	r1, r8
 800169e:	ebb2 0a01 	subs.w	sl, r2, r1
 80016a2:	4649      	mov	r1, r9
 80016a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80016b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80016b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80016bc:	ebb2 040a 	subs.w	r4, r2, sl
 80016c0:	eb63 050b 	sbc.w	r5, r3, fp
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	00eb      	lsls	r3, r5, #3
 80016ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016d2:	00e2      	lsls	r2, r4, #3
 80016d4:	4614      	mov	r4, r2
 80016d6:	461d      	mov	r5, r3
 80016d8:	4643      	mov	r3, r8
 80016da:	18e3      	adds	r3, r4, r3
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	464b      	mov	r3, r9
 80016e0:	eb45 0303 	adc.w	r3, r5, r3
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016f2:	4629      	mov	r1, r5
 80016f4:	028b      	lsls	r3, r1, #10
 80016f6:	4621      	mov	r1, r4
 80016f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016fc:	4621      	mov	r1, r4
 80016fe:	028a      	lsls	r2, r1, #10
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001708:	2200      	movs	r2, #0
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	61fa      	str	r2, [r7, #28]
 800170e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001712:	f7fe fdd5 	bl	80002c0 <__aeabi_uldivmod>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4613      	mov	r3, r2
 800171c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001720:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x348>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	0f1b      	lsrs	r3, r3, #28
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800172e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001732:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800173e:	e003      	b.n	8001748 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001742:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001746:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001748:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800174c:	4618      	mov	r0, r3
 800174e:	3798      	adds	r7, #152	@ 0x98
 8001750:	46bd      	mov	sp, r7
 8001752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	00f42400 	.word	0x00f42400
 8001760:	017d7840 	.word	0x017d7840

08001764 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e28d      	b.n	8001c92 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8083 	beq.w	800188a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001784:	4b94      	ldr	r3, [pc, #592]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b04      	cmp	r3, #4
 800178e:	d019      	beq.n	80017c4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001790:	4b91      	ldr	r3, [pc, #580]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 030c 	and.w	r3, r3, #12
        || \
 8001798:	2b08      	cmp	r3, #8
 800179a:	d106      	bne.n	80017aa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800179c:	4b8e      	ldr	r3, [pc, #568]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017a8:	d00c      	beq.n	80017c4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017aa:	4b8b      	ldr	r3, [pc, #556]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017b2:	2b0c      	cmp	r3, #12
 80017b4:	d112      	bne.n	80017dc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017b6:	4b88      	ldr	r3, [pc, #544]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017c2:	d10b      	bne.n	80017dc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	4b84      	ldr	r3, [pc, #528]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d05b      	beq.n	8001888 <HAL_RCC_OscConfig+0x124>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d157      	bne.n	8001888 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e25a      	b.n	8001c92 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017e4:	d106      	bne.n	80017f4 <HAL_RCC_OscConfig+0x90>
 80017e6:	4b7c      	ldr	r3, [pc, #496]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a7b      	ldr	r2, [pc, #492]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e01d      	b.n	8001830 <HAL_RCC_OscConfig+0xcc>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017fc:	d10c      	bne.n	8001818 <HAL_RCC_OscConfig+0xb4>
 80017fe:	4b76      	ldr	r3, [pc, #472]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a75      	ldr	r2, [pc, #468]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 8001804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	4b73      	ldr	r3, [pc, #460]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a72      	ldr	r2, [pc, #456]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 8001810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e00b      	b.n	8001830 <HAL_RCC_OscConfig+0xcc>
 8001818:	4b6f      	ldr	r3, [pc, #444]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a6e      	ldr	r2, [pc, #440]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 800181e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b6c      	ldr	r3, [pc, #432]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a6b      	ldr	r2, [pc, #428]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 800182a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800182e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff f9fe 	bl	8000c38 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff f9fa 	bl	8000c38 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	@ 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e21f      	b.n	8001c92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	4b61      	ldr	r3, [pc, #388]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0xdc>
 800185e:	e014      	b.n	800188a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff f9ea 	bl	8000c38 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff f9e6 	bl	8000c38 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	@ 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e20b      	b.n	8001c92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187a:	4b57      	ldr	r3, [pc, #348]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x104>
 8001886:	e000      	b.n	800188a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d06f      	beq.n	8001976 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001896:	4b50      	ldr	r3, [pc, #320]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d017      	beq.n	80018d2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018a2:	4b4d      	ldr	r3, [pc, #308]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 030c 	and.w	r3, r3, #12
        || \
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d105      	bne.n	80018ba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018ae:	4b4a      	ldr	r3, [pc, #296]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00b      	beq.n	80018d2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ba:	4b47      	ldr	r3, [pc, #284]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018c2:	2b0c      	cmp	r3, #12
 80018c4:	d11c      	bne.n	8001900 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c6:	4b44      	ldr	r3, [pc, #272]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d116      	bne.n	8001900 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d2:	4b41      	ldr	r3, [pc, #260]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_RCC_OscConfig+0x186>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e1d3      	b.n	8001c92 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ea:	4b3b      	ldr	r3, [pc, #236]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4937      	ldr	r1, [pc, #220]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fe:	e03a      	b.n	8001976 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001908:	4b34      	ldr	r3, [pc, #208]	@ (80019dc <HAL_RCC_OscConfig+0x278>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7ff f993 	bl	8000c38 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001916:	f7ff f98f 	bl	8000c38 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e1b4      	b.n	8001c92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001928:	4b2b      	ldr	r3, [pc, #172]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001934:	4b28      	ldr	r3, [pc, #160]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4925      	ldr	r1, [pc, #148]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]
 8001948:	e015      	b.n	8001976 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194a:	4b24      	ldr	r3, [pc, #144]	@ (80019dc <HAL_RCC_OscConfig+0x278>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff f972 	bl	8000c38 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001958:	f7ff f96e 	bl	8000c38 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e193      	b.n	8001c92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196a:	4b1b      	ldr	r3, [pc, #108]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d036      	beq.n	80019f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d016      	beq.n	80019b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <HAL_RCC_OscConfig+0x27c>)
 800198c:	2201      	movs	r2, #1
 800198e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001990:	f7ff f952 	bl	8000c38 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001998:	f7ff f94e 	bl	8000c38 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e173      	b.n	8001c92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <HAL_RCC_OscConfig+0x274>)
 80019ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x234>
 80019b6:	e01b      	b.n	80019f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b8:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <HAL_RCC_OscConfig+0x27c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019be:	f7ff f93b 	bl	8000c38 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c4:	e00e      	b.n	80019e4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c6:	f7ff f937 	bl	8000c38 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d907      	bls.n	80019e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e15c      	b.n	8001c92 <HAL_RCC_OscConfig+0x52e>
 80019d8:	40023800 	.word	0x40023800
 80019dc:	42470000 	.word	0x42470000
 80019e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e4:	4b8a      	ldr	r3, [pc, #552]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 80019e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1ea      	bne.n	80019c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 8097 	beq.w	8001b2c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a02:	4b83      	ldr	r3, [pc, #524]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10f      	bne.n	8001a2e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	4b7f      	ldr	r3, [pc, #508]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	4a7e      	ldr	r2, [pc, #504]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2e:	4b79      	ldr	r3, [pc, #484]	@ (8001c14 <HAL_RCC_OscConfig+0x4b0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d118      	bne.n	8001a6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a3a:	4b76      	ldr	r3, [pc, #472]	@ (8001c14 <HAL_RCC_OscConfig+0x4b0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a75      	ldr	r2, [pc, #468]	@ (8001c14 <HAL_RCC_OscConfig+0x4b0>)
 8001a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a46:	f7ff f8f7 	bl	8000c38 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4e:	f7ff f8f3 	bl	8000c38 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e118      	b.n	8001c92 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	4b6c      	ldr	r3, [pc, #432]	@ (8001c14 <HAL_RCC_OscConfig+0x4b0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d106      	bne.n	8001a82 <HAL_RCC_OscConfig+0x31e>
 8001a74:	4b66      	ldr	r3, [pc, #408]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a78:	4a65      	ldr	r2, [pc, #404]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a80:	e01c      	b.n	8001abc <HAL_RCC_OscConfig+0x358>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b05      	cmp	r3, #5
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x340>
 8001a8a:	4b61      	ldr	r3, [pc, #388]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8e:	4a60      	ldr	r2, [pc, #384]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a96:	4b5e      	ldr	r3, [pc, #376]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a9a:	4a5d      	ldr	r2, [pc, #372]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aa2:	e00b      	b.n	8001abc <HAL_RCC_OscConfig+0x358>
 8001aa4:	4b5a      	ldr	r3, [pc, #360]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa8:	4a59      	ldr	r2, [pc, #356]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ab0:	4b57      	ldr	r3, [pc, #348]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab4:	4a56      	ldr	r2, [pc, #344]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001ab6:	f023 0304 	bic.w	r3, r3, #4
 8001aba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d015      	beq.n	8001af0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac4:	f7ff f8b8 	bl	8000c38 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001acc:	f7ff f8b4 	bl	8000c38 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e0d7      	b.n	8001c92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae2:	4b4b      	ldr	r3, [pc, #300]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0ee      	beq.n	8001acc <HAL_RCC_OscConfig+0x368>
 8001aee:	e014      	b.n	8001b1a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7ff f8a2 	bl	8000c38 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af8:	f7ff f89e 	bl	8000c38 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e0c1      	b.n	8001c92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0e:	4b40      	ldr	r3, [pc, #256]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1ee      	bne.n	8001af8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b1a:	7dfb      	ldrb	r3, [r7, #23]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d105      	bne.n	8001b2c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b20:	4b3b      	ldr	r3, [pc, #236]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	4a3a      	ldr	r2, [pc, #232]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001b26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80ad 	beq.w	8001c90 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b36:	4b36      	ldr	r3, [pc, #216]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d060      	beq.n	8001c04 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d145      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4a:	4b33      	ldr	r3, [pc, #204]	@ (8001c18 <HAL_RCC_OscConfig+0x4b4>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff f872 	bl	8000c38 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f86e 	bl	8000c38 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e093      	b.n	8001c92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	4b29      	ldr	r3, [pc, #164]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69da      	ldr	r2, [r3, #28]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b84:	019b      	lsls	r3, r3, #6
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8c:	085b      	lsrs	r3, r3, #1
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	041b      	lsls	r3, r3, #16
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b98:	061b      	lsls	r3, r3, #24
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba0:	071b      	lsls	r3, r3, #28
 8001ba2:	491b      	ldr	r1, [pc, #108]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <HAL_RCC_OscConfig+0x4b4>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7ff f843 	bl	8000c38 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb6:	f7ff f83f 	bl	8000c38 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e064      	b.n	8001c92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc8:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x452>
 8001bd4:	e05c      	b.n	8001c90 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <HAL_RCC_OscConfig+0x4b4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f82c 	bl	8000c38 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be4:	f7ff f828 	bl	8000c38 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e04d      	b.n	8001c92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf6:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_RCC_OscConfig+0x4ac>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x480>
 8001c02:	e045      	b.n	8001c90 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d107      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e040      	b.n	8001c92 <HAL_RCC_OscConfig+0x52e>
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40007000 	.word	0x40007000
 8001c18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c9c <HAL_RCC_OscConfig+0x538>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d030      	beq.n	8001c8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d129      	bne.n	8001c8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d122      	bne.n	8001c8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d119      	bne.n	8001c8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c62:	085b      	lsrs	r3, r3, #1
 8001c64:	3b01      	subs	r3, #1
 8001c66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d10f      	bne.n	8001c8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e042      	b.n	8001d38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d106      	bne.n	8001ccc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7fe fe66 	bl	8000998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2224      	movs	r2, #36	@ 0x24
 8001cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ce2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 fa09 	bl	80020fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001cf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	695a      	ldr	r2, [r3, #20]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2220      	movs	r2, #32
 8001d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	@ 0x28
 8001d44:	af02      	add	r7, sp, #8
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b20      	cmp	r3, #32
 8001d5e:	d175      	bne.n	8001e4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <HAL_UART_Transmit+0x2c>
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e06e      	b.n	8001e4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2221      	movs	r2, #33	@ 0x21
 8001d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d7e:	f7fe ff5b 	bl	8000c38 <HAL_GetTick>
 8001d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	88fa      	ldrh	r2, [r7, #6]
 8001d88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	88fa      	ldrh	r2, [r7, #6]
 8001d8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d98:	d108      	bne.n	8001dac <HAL_UART_Transmit+0x6c>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d104      	bne.n	8001dac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	61bb      	str	r3, [r7, #24]
 8001daa:	e003      	b.n	8001db4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001db4:	e02e      	b.n	8001e14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2180      	movs	r1, #128	@ 0x80
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f8df 	bl	8001f84 <UART_WaitOnFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e03a      	b.n	8001e4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10b      	bne.n	8001df6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	3302      	adds	r3, #2
 8001df2:	61bb      	str	r3, [r7, #24]
 8001df4:	e007      	b.n	8001e06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	781a      	ldrb	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	3301      	adds	r3, #1
 8001e04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1cb      	bne.n	8001db6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2200      	movs	r2, #0
 8001e26:	2140      	movs	r1, #64	@ 0x40
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f000 f8ab 	bl	8001f84 <UART_WaitOnFlagUntilTimeout>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2220      	movs	r2, #32
 8001e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e006      	b.n	8001e4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e000      	b.n	8001e4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001e4c:	2302      	movs	r3, #2
  }
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3720      	adds	r7, #32
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b08a      	sub	sp, #40	@ 0x28
 8001e5a:	af02      	add	r7, sp, #8
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	4613      	mov	r3, r2
 8001e64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b20      	cmp	r3, #32
 8001e74:	f040 8081 	bne.w	8001f7a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <HAL_UART_Receive+0x2e>
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e079      	b.n	8001f7c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2222      	movs	r2, #34	@ 0x22
 8001e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e9c:	f7fe fecc 	bl	8000c38 <HAL_GetTick>
 8001ea0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	88fa      	ldrh	r2, [r7, #6]
 8001ea6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	88fa      	ldrh	r2, [r7, #6]
 8001eac:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001eb6:	d108      	bne.n	8001eca <HAL_UART_Receive+0x74>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d104      	bne.n	8001eca <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	61bb      	str	r3, [r7, #24]
 8001ec8:	e003      	b.n	8001ed2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001ed2:	e047      	b.n	8001f64 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2200      	movs	r2, #0
 8001edc:	2120      	movs	r1, #32
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 f850 	bl	8001f84 <UART_WaitOnFlagUntilTimeout>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d005      	beq.n	8001ef6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e042      	b.n	8001f7c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10c      	bne.n	8001f16 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	3302      	adds	r3, #2
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	e01f      	b.n	8001f56 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f1e:	d007      	beq.n	8001f30 <HAL_UART_Receive+0xda>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10a      	bne.n	8001f3e <HAL_UART_Receive+0xe8>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d106      	bne.n	8001f3e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	e008      	b.n	8001f50 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	3301      	adds	r3, #1
 8001f54:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1b2      	bne.n	8001ed4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001f7a:	2302      	movs	r3, #2
  }
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3720      	adds	r7, #32
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	4613      	mov	r3, r2
 8001f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f94:	e03b      	b.n	800200e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f9c:	d037      	beq.n	800200e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f9e:	f7fe fe4b 	bl	8000c38 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	6a3a      	ldr	r2, [r7, #32]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d302      	bcc.n	8001fb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e03a      	b.n	800202e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d023      	beq.n	800200e <UART_WaitOnFlagUntilTimeout+0x8a>
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b80      	cmp	r3, #128	@ 0x80
 8001fca:	d020      	beq.n	800200e <UART_WaitOnFlagUntilTimeout+0x8a>
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b40      	cmp	r3, #64	@ 0x40
 8001fd0:	d01d      	beq.n	800200e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d116      	bne.n	800200e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 f81d 	bl	8002036 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2208      	movs	r2, #8
 8002000:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e00f      	b.n	800202e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4013      	ands	r3, r2
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	429a      	cmp	r2, r3
 800201c:	bf0c      	ite	eq
 800201e:	2301      	moveq	r3, #1
 8002020:	2300      	movne	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	429a      	cmp	r2, r3
 800202a:	d0b4      	beq.n	8001f96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002036:	b480      	push	{r7}
 8002038:	b095      	sub	sp, #84	@ 0x54
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	330c      	adds	r3, #12
 8002044:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002048:	e853 3f00 	ldrex	r3, [r3]
 800204c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800204e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002050:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002054:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	330c      	adds	r3, #12
 800205c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800205e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002060:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002062:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002064:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002066:	e841 2300 	strex	r3, r2, [r1]
 800206a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800206c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1e5      	bne.n	800203e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3314      	adds	r3, #20
 8002078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	e853 3f00 	ldrex	r3, [r3]
 8002080:	61fb      	str	r3, [r7, #28]
   return(result);
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	3314      	adds	r3, #20
 8002090:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002094:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002096:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800209a:	e841 2300 	strex	r3, r2, [r1]
 800209e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1e5      	bne.n	8002072 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d119      	bne.n	80020e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	330c      	adds	r3, #12
 80020b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	e853 3f00 	ldrex	r3, [r3]
 80020bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f023 0310 	bic.w	r3, r3, #16
 80020c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	330c      	adds	r3, #12
 80020cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020ce:	61ba      	str	r2, [r7, #24]
 80020d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020d2:	6979      	ldr	r1, [r7, #20]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	e841 2300 	strex	r3, r2, [r1]
 80020da:	613b      	str	r3, [r7, #16]
   return(result);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1e5      	bne.n	80020ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80020f0:	bf00      	nop
 80020f2:	3754      	adds	r7, #84	@ 0x54
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002100:	b0c0      	sub	sp, #256	@ 0x100
 8002102:	af00      	add	r7, sp, #0
 8002104:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002118:	68d9      	ldr	r1, [r3, #12]
 800211a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	ea40 0301 	orr.w	r3, r0, r1
 8002124:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	431a      	orrs	r2, r3
 8002134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	431a      	orrs	r2, r3
 800213c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002154:	f021 010c 	bic.w	r1, r1, #12
 8002158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002162:	430b      	orrs	r3, r1
 8002164:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002176:	6999      	ldr	r1, [r3, #24]
 8002178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	ea40 0301 	orr.w	r3, r0, r1
 8002182:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4b8f      	ldr	r3, [pc, #572]	@ (80023c8 <UART_SetConfig+0x2cc>)
 800218c:	429a      	cmp	r2, r3
 800218e:	d005      	beq.n	800219c <UART_SetConfig+0xa0>
 8002190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4b8d      	ldr	r3, [pc, #564]	@ (80023cc <UART_SetConfig+0x2d0>)
 8002198:	429a      	cmp	r2, r3
 800219a:	d104      	bne.n	80021a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800219c:	f7ff f924 	bl	80013e8 <HAL_RCC_GetPCLK2Freq>
 80021a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80021a4:	e003      	b.n	80021ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021a6:	f7ff f90b 	bl	80013c0 <HAL_RCC_GetPCLK1Freq>
 80021aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021b8:	f040 810c 	bne.w	80023d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021c0:	2200      	movs	r2, #0
 80021c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80021c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80021ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80021ce:	4622      	mov	r2, r4
 80021d0:	462b      	mov	r3, r5
 80021d2:	1891      	adds	r1, r2, r2
 80021d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80021d6:	415b      	adcs	r3, r3
 80021d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80021da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80021de:	4621      	mov	r1, r4
 80021e0:	eb12 0801 	adds.w	r8, r2, r1
 80021e4:	4629      	mov	r1, r5
 80021e6:	eb43 0901 	adc.w	r9, r3, r1
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	f04f 0300 	mov.w	r3, #0
 80021f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021fe:	4690      	mov	r8, r2
 8002200:	4699      	mov	r9, r3
 8002202:	4623      	mov	r3, r4
 8002204:	eb18 0303 	adds.w	r3, r8, r3
 8002208:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800220c:	462b      	mov	r3, r5
 800220e:	eb49 0303 	adc.w	r3, r9, r3
 8002212:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002222:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002226:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800222a:	460b      	mov	r3, r1
 800222c:	18db      	adds	r3, r3, r3
 800222e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002230:	4613      	mov	r3, r2
 8002232:	eb42 0303 	adc.w	r3, r2, r3
 8002236:	657b      	str	r3, [r7, #84]	@ 0x54
 8002238:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800223c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002240:	f7fe f83e 	bl	80002c0 <__aeabi_uldivmod>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4b61      	ldr	r3, [pc, #388]	@ (80023d0 <UART_SetConfig+0x2d4>)
 800224a:	fba3 2302 	umull	r2, r3, r3, r2
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	011c      	lsls	r4, r3, #4
 8002252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002256:	2200      	movs	r2, #0
 8002258:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800225c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002260:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002264:	4642      	mov	r2, r8
 8002266:	464b      	mov	r3, r9
 8002268:	1891      	adds	r1, r2, r2
 800226a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800226c:	415b      	adcs	r3, r3
 800226e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002270:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002274:	4641      	mov	r1, r8
 8002276:	eb12 0a01 	adds.w	sl, r2, r1
 800227a:	4649      	mov	r1, r9
 800227c:	eb43 0b01 	adc.w	fp, r3, r1
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800228c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002290:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002294:	4692      	mov	sl, r2
 8002296:	469b      	mov	fp, r3
 8002298:	4643      	mov	r3, r8
 800229a:	eb1a 0303 	adds.w	r3, sl, r3
 800229e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80022a2:	464b      	mov	r3, r9
 80022a4:	eb4b 0303 	adc.w	r3, fp, r3
 80022a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80022ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80022b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80022bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80022c0:	460b      	mov	r3, r1
 80022c2:	18db      	adds	r3, r3, r3
 80022c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80022c6:	4613      	mov	r3, r2
 80022c8:	eb42 0303 	adc.w	r3, r2, r3
 80022cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80022ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80022d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80022d6:	f7fd fff3 	bl	80002c0 <__aeabi_uldivmod>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4611      	mov	r1, r2
 80022e0:	4b3b      	ldr	r3, [pc, #236]	@ (80023d0 <UART_SetConfig+0x2d4>)
 80022e2:	fba3 2301 	umull	r2, r3, r3, r1
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	2264      	movs	r2, #100	@ 0x64
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	1acb      	subs	r3, r1, r3
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80022f6:	4b36      	ldr	r3, [pc, #216]	@ (80023d0 <UART_SetConfig+0x2d4>)
 80022f8:	fba3 2302 	umull	r2, r3, r3, r2
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002304:	441c      	add	r4, r3
 8002306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800230a:	2200      	movs	r2, #0
 800230c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002310:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002314:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002318:	4642      	mov	r2, r8
 800231a:	464b      	mov	r3, r9
 800231c:	1891      	adds	r1, r2, r2
 800231e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002320:	415b      	adcs	r3, r3
 8002322:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002324:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002328:	4641      	mov	r1, r8
 800232a:	1851      	adds	r1, r2, r1
 800232c:	6339      	str	r1, [r7, #48]	@ 0x30
 800232e:	4649      	mov	r1, r9
 8002330:	414b      	adcs	r3, r1
 8002332:	637b      	str	r3, [r7, #52]	@ 0x34
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002340:	4659      	mov	r1, fp
 8002342:	00cb      	lsls	r3, r1, #3
 8002344:	4651      	mov	r1, sl
 8002346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800234a:	4651      	mov	r1, sl
 800234c:	00ca      	lsls	r2, r1, #3
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	4603      	mov	r3, r0
 8002354:	4642      	mov	r2, r8
 8002356:	189b      	adds	r3, r3, r2
 8002358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800235c:	464b      	mov	r3, r9
 800235e:	460a      	mov	r2, r1
 8002360:	eb42 0303 	adc.w	r3, r2, r3
 8002364:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002374:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002378:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800237c:	460b      	mov	r3, r1
 800237e:	18db      	adds	r3, r3, r3
 8002380:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002382:	4613      	mov	r3, r2
 8002384:	eb42 0303 	adc.w	r3, r2, r3
 8002388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800238a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800238e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002392:	f7fd ff95 	bl	80002c0 <__aeabi_uldivmod>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <UART_SetConfig+0x2d4>)
 800239c:	fba3 1302 	umull	r1, r3, r3, r2
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	2164      	movs	r1, #100	@ 0x64
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	3332      	adds	r3, #50	@ 0x32
 80023ae:	4a08      	ldr	r2, [pc, #32]	@ (80023d0 <UART_SetConfig+0x2d4>)
 80023b0:	fba2 2303 	umull	r2, r3, r2, r3
 80023b4:	095b      	lsrs	r3, r3, #5
 80023b6:	f003 0207 	and.w	r2, r3, #7
 80023ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4422      	add	r2, r4
 80023c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023c4:	e106      	b.n	80025d4 <UART_SetConfig+0x4d8>
 80023c6:	bf00      	nop
 80023c8:	40011000 	.word	0x40011000
 80023cc:	40011400 	.word	0x40011400
 80023d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023d8:	2200      	movs	r2, #0
 80023da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80023de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80023e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80023e6:	4642      	mov	r2, r8
 80023e8:	464b      	mov	r3, r9
 80023ea:	1891      	adds	r1, r2, r2
 80023ec:	6239      	str	r1, [r7, #32]
 80023ee:	415b      	adcs	r3, r3
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80023f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023f6:	4641      	mov	r1, r8
 80023f8:	1854      	adds	r4, r2, r1
 80023fa:	4649      	mov	r1, r9
 80023fc:	eb43 0501 	adc.w	r5, r3, r1
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	00eb      	lsls	r3, r5, #3
 800240a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800240e:	00e2      	lsls	r2, r4, #3
 8002410:	4614      	mov	r4, r2
 8002412:	461d      	mov	r5, r3
 8002414:	4643      	mov	r3, r8
 8002416:	18e3      	adds	r3, r4, r3
 8002418:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800241c:	464b      	mov	r3, r9
 800241e:	eb45 0303 	adc.w	r3, r5, r3
 8002422:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002432:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002442:	4629      	mov	r1, r5
 8002444:	008b      	lsls	r3, r1, #2
 8002446:	4621      	mov	r1, r4
 8002448:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800244c:	4621      	mov	r1, r4
 800244e:	008a      	lsls	r2, r1, #2
 8002450:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002454:	f7fd ff34 	bl	80002c0 <__aeabi_uldivmod>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4b60      	ldr	r3, [pc, #384]	@ (80025e0 <UART_SetConfig+0x4e4>)
 800245e:	fba3 2302 	umull	r2, r3, r3, r2
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	011c      	lsls	r4, r3, #4
 8002466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800246a:	2200      	movs	r2, #0
 800246c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002470:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002474:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002478:	4642      	mov	r2, r8
 800247a:	464b      	mov	r3, r9
 800247c:	1891      	adds	r1, r2, r2
 800247e:	61b9      	str	r1, [r7, #24]
 8002480:	415b      	adcs	r3, r3
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002488:	4641      	mov	r1, r8
 800248a:	1851      	adds	r1, r2, r1
 800248c:	6139      	str	r1, [r7, #16]
 800248e:	4649      	mov	r1, r9
 8002490:	414b      	adcs	r3, r1
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024a0:	4659      	mov	r1, fp
 80024a2:	00cb      	lsls	r3, r1, #3
 80024a4:	4651      	mov	r1, sl
 80024a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024aa:	4651      	mov	r1, sl
 80024ac:	00ca      	lsls	r2, r1, #3
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	4642      	mov	r2, r8
 80024b6:	189b      	adds	r3, r3, r2
 80024b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80024bc:	464b      	mov	r3, r9
 80024be:	460a      	mov	r2, r1
 80024c0:	eb42 0303 	adc.w	r3, r2, r3
 80024c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80024c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80024e0:	4649      	mov	r1, r9
 80024e2:	008b      	lsls	r3, r1, #2
 80024e4:	4641      	mov	r1, r8
 80024e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024ea:	4641      	mov	r1, r8
 80024ec:	008a      	lsls	r2, r1, #2
 80024ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80024f2:	f7fd fee5 	bl	80002c0 <__aeabi_uldivmod>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4611      	mov	r1, r2
 80024fc:	4b38      	ldr	r3, [pc, #224]	@ (80025e0 <UART_SetConfig+0x4e4>)
 80024fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	2264      	movs	r2, #100	@ 0x64
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	1acb      	subs	r3, r1, r3
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	3332      	adds	r3, #50	@ 0x32
 8002510:	4a33      	ldr	r2, [pc, #204]	@ (80025e0 <UART_SetConfig+0x4e4>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800251c:	441c      	add	r4, r3
 800251e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002522:	2200      	movs	r2, #0
 8002524:	673b      	str	r3, [r7, #112]	@ 0x70
 8002526:	677a      	str	r2, [r7, #116]	@ 0x74
 8002528:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800252c:	4642      	mov	r2, r8
 800252e:	464b      	mov	r3, r9
 8002530:	1891      	adds	r1, r2, r2
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	415b      	adcs	r3, r3
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800253c:	4641      	mov	r1, r8
 800253e:	1851      	adds	r1, r2, r1
 8002540:	6039      	str	r1, [r7, #0]
 8002542:	4649      	mov	r1, r9
 8002544:	414b      	adcs	r3, r1
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002554:	4659      	mov	r1, fp
 8002556:	00cb      	lsls	r3, r1, #3
 8002558:	4651      	mov	r1, sl
 800255a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800255e:	4651      	mov	r1, sl
 8002560:	00ca      	lsls	r2, r1, #3
 8002562:	4610      	mov	r0, r2
 8002564:	4619      	mov	r1, r3
 8002566:	4603      	mov	r3, r0
 8002568:	4642      	mov	r2, r8
 800256a:	189b      	adds	r3, r3, r2
 800256c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800256e:	464b      	mov	r3, r9
 8002570:	460a      	mov	r2, r1
 8002572:	eb42 0303 	adc.w	r3, r2, r3
 8002576:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	663b      	str	r3, [r7, #96]	@ 0x60
 8002582:	667a      	str	r2, [r7, #100]	@ 0x64
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002590:	4649      	mov	r1, r9
 8002592:	008b      	lsls	r3, r1, #2
 8002594:	4641      	mov	r1, r8
 8002596:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800259a:	4641      	mov	r1, r8
 800259c:	008a      	lsls	r2, r1, #2
 800259e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80025a2:	f7fd fe8d 	bl	80002c0 <__aeabi_uldivmod>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4b0d      	ldr	r3, [pc, #52]	@ (80025e0 <UART_SetConfig+0x4e4>)
 80025ac:	fba3 1302 	umull	r1, r3, r3, r2
 80025b0:	095b      	lsrs	r3, r3, #5
 80025b2:	2164      	movs	r1, #100	@ 0x64
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	3332      	adds	r3, #50	@ 0x32
 80025be:	4a08      	ldr	r2, [pc, #32]	@ (80025e0 <UART_SetConfig+0x4e4>)
 80025c0:	fba2 2303 	umull	r2, r3, r2, r3
 80025c4:	095b      	lsrs	r3, r3, #5
 80025c6:	f003 020f 	and.w	r2, r3, #15
 80025ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4422      	add	r2, r4
 80025d2:	609a      	str	r2, [r3, #8]
}
 80025d4:	bf00      	nop
 80025d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80025da:	46bd      	mov	sp, r7
 80025dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025e0:	51eb851f 	.word	0x51eb851f

080025e4 <atoi>:
 80025e4:	220a      	movs	r2, #10
 80025e6:	2100      	movs	r1, #0
 80025e8:	f000 b89c 	b.w	8002724 <strtol>

080025ec <siprintf>:
 80025ec:	b40e      	push	{r1, r2, r3}
 80025ee:	b510      	push	{r4, lr}
 80025f0:	b09d      	sub	sp, #116	@ 0x74
 80025f2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80025f4:	9002      	str	r0, [sp, #8]
 80025f6:	9006      	str	r0, [sp, #24]
 80025f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80025fc:	480a      	ldr	r0, [pc, #40]	@ (8002628 <siprintf+0x3c>)
 80025fe:	9107      	str	r1, [sp, #28]
 8002600:	9104      	str	r1, [sp, #16]
 8002602:	490a      	ldr	r1, [pc, #40]	@ (800262c <siprintf+0x40>)
 8002604:	f853 2b04 	ldr.w	r2, [r3], #4
 8002608:	9105      	str	r1, [sp, #20]
 800260a:	2400      	movs	r4, #0
 800260c:	a902      	add	r1, sp, #8
 800260e:	6800      	ldr	r0, [r0, #0]
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002614:	f000 f920 	bl	8002858 <_svfiprintf_r>
 8002618:	9b02      	ldr	r3, [sp, #8]
 800261a:	701c      	strb	r4, [r3, #0]
 800261c:	b01d      	add	sp, #116	@ 0x74
 800261e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002622:	b003      	add	sp, #12
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	2000000c 	.word	0x2000000c
 800262c:	ffff0208 	.word	0xffff0208

08002630 <_strtol_l.isra.0>:
 8002630:	2b24      	cmp	r3, #36	@ 0x24
 8002632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002636:	4686      	mov	lr, r0
 8002638:	4690      	mov	r8, r2
 800263a:	d801      	bhi.n	8002640 <_strtol_l.isra.0+0x10>
 800263c:	2b01      	cmp	r3, #1
 800263e:	d106      	bne.n	800264e <_strtol_l.isra.0+0x1e>
 8002640:	f000 f882 	bl	8002748 <__errno>
 8002644:	2316      	movs	r3, #22
 8002646:	6003      	str	r3, [r0, #0]
 8002648:	2000      	movs	r0, #0
 800264a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800264e:	4834      	ldr	r0, [pc, #208]	@ (8002720 <_strtol_l.isra.0+0xf0>)
 8002650:	460d      	mov	r5, r1
 8002652:	462a      	mov	r2, r5
 8002654:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002658:	5d06      	ldrb	r6, [r0, r4]
 800265a:	f016 0608 	ands.w	r6, r6, #8
 800265e:	d1f8      	bne.n	8002652 <_strtol_l.isra.0+0x22>
 8002660:	2c2d      	cmp	r4, #45	@ 0x2d
 8002662:	d110      	bne.n	8002686 <_strtol_l.isra.0+0x56>
 8002664:	782c      	ldrb	r4, [r5, #0]
 8002666:	2601      	movs	r6, #1
 8002668:	1c95      	adds	r5, r2, #2
 800266a:	f033 0210 	bics.w	r2, r3, #16
 800266e:	d115      	bne.n	800269c <_strtol_l.isra.0+0x6c>
 8002670:	2c30      	cmp	r4, #48	@ 0x30
 8002672:	d10d      	bne.n	8002690 <_strtol_l.isra.0+0x60>
 8002674:	782a      	ldrb	r2, [r5, #0]
 8002676:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800267a:	2a58      	cmp	r2, #88	@ 0x58
 800267c:	d108      	bne.n	8002690 <_strtol_l.isra.0+0x60>
 800267e:	786c      	ldrb	r4, [r5, #1]
 8002680:	3502      	adds	r5, #2
 8002682:	2310      	movs	r3, #16
 8002684:	e00a      	b.n	800269c <_strtol_l.isra.0+0x6c>
 8002686:	2c2b      	cmp	r4, #43	@ 0x2b
 8002688:	bf04      	itt	eq
 800268a:	782c      	ldrbeq	r4, [r5, #0]
 800268c:	1c95      	addeq	r5, r2, #2
 800268e:	e7ec      	b.n	800266a <_strtol_l.isra.0+0x3a>
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f6      	bne.n	8002682 <_strtol_l.isra.0+0x52>
 8002694:	2c30      	cmp	r4, #48	@ 0x30
 8002696:	bf14      	ite	ne
 8002698:	230a      	movne	r3, #10
 800269a:	2308      	moveq	r3, #8
 800269c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80026a0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80026a4:	2200      	movs	r2, #0
 80026a6:	fbbc f9f3 	udiv	r9, ip, r3
 80026aa:	4610      	mov	r0, r2
 80026ac:	fb03 ca19 	mls	sl, r3, r9, ip
 80026b0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80026b4:	2f09      	cmp	r7, #9
 80026b6:	d80f      	bhi.n	80026d8 <_strtol_l.isra.0+0xa8>
 80026b8:	463c      	mov	r4, r7
 80026ba:	42a3      	cmp	r3, r4
 80026bc:	dd1b      	ble.n	80026f6 <_strtol_l.isra.0+0xc6>
 80026be:	1c57      	adds	r7, r2, #1
 80026c0:	d007      	beq.n	80026d2 <_strtol_l.isra.0+0xa2>
 80026c2:	4581      	cmp	r9, r0
 80026c4:	d314      	bcc.n	80026f0 <_strtol_l.isra.0+0xc0>
 80026c6:	d101      	bne.n	80026cc <_strtol_l.isra.0+0x9c>
 80026c8:	45a2      	cmp	sl, r4
 80026ca:	db11      	blt.n	80026f0 <_strtol_l.isra.0+0xc0>
 80026cc:	fb00 4003 	mla	r0, r0, r3, r4
 80026d0:	2201      	movs	r2, #1
 80026d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80026d6:	e7eb      	b.n	80026b0 <_strtol_l.isra.0+0x80>
 80026d8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80026dc:	2f19      	cmp	r7, #25
 80026de:	d801      	bhi.n	80026e4 <_strtol_l.isra.0+0xb4>
 80026e0:	3c37      	subs	r4, #55	@ 0x37
 80026e2:	e7ea      	b.n	80026ba <_strtol_l.isra.0+0x8a>
 80026e4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80026e8:	2f19      	cmp	r7, #25
 80026ea:	d804      	bhi.n	80026f6 <_strtol_l.isra.0+0xc6>
 80026ec:	3c57      	subs	r4, #87	@ 0x57
 80026ee:	e7e4      	b.n	80026ba <_strtol_l.isra.0+0x8a>
 80026f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026f4:	e7ed      	b.n	80026d2 <_strtol_l.isra.0+0xa2>
 80026f6:	1c53      	adds	r3, r2, #1
 80026f8:	d108      	bne.n	800270c <_strtol_l.isra.0+0xdc>
 80026fa:	2322      	movs	r3, #34	@ 0x22
 80026fc:	f8ce 3000 	str.w	r3, [lr]
 8002700:	4660      	mov	r0, ip
 8002702:	f1b8 0f00 	cmp.w	r8, #0
 8002706:	d0a0      	beq.n	800264a <_strtol_l.isra.0+0x1a>
 8002708:	1e69      	subs	r1, r5, #1
 800270a:	e006      	b.n	800271a <_strtol_l.isra.0+0xea>
 800270c:	b106      	cbz	r6, 8002710 <_strtol_l.isra.0+0xe0>
 800270e:	4240      	negs	r0, r0
 8002710:	f1b8 0f00 	cmp.w	r8, #0
 8002714:	d099      	beq.n	800264a <_strtol_l.isra.0+0x1a>
 8002716:	2a00      	cmp	r2, #0
 8002718:	d1f6      	bne.n	8002708 <_strtol_l.isra.0+0xd8>
 800271a:	f8c8 1000 	str.w	r1, [r8]
 800271e:	e794      	b.n	800264a <_strtol_l.isra.0+0x1a>
 8002720:	08003161 	.word	0x08003161

08002724 <strtol>:
 8002724:	4613      	mov	r3, r2
 8002726:	460a      	mov	r2, r1
 8002728:	4601      	mov	r1, r0
 800272a:	4802      	ldr	r0, [pc, #8]	@ (8002734 <strtol+0x10>)
 800272c:	6800      	ldr	r0, [r0, #0]
 800272e:	f7ff bf7f 	b.w	8002630 <_strtol_l.isra.0>
 8002732:	bf00      	nop
 8002734:	2000000c 	.word	0x2000000c

08002738 <memset>:
 8002738:	4402      	add	r2, r0
 800273a:	4603      	mov	r3, r0
 800273c:	4293      	cmp	r3, r2
 800273e:	d100      	bne.n	8002742 <memset+0xa>
 8002740:	4770      	bx	lr
 8002742:	f803 1b01 	strb.w	r1, [r3], #1
 8002746:	e7f9      	b.n	800273c <memset+0x4>

08002748 <__errno>:
 8002748:	4b01      	ldr	r3, [pc, #4]	@ (8002750 <__errno+0x8>)
 800274a:	6818      	ldr	r0, [r3, #0]
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	2000000c 	.word	0x2000000c

08002754 <__libc_init_array>:
 8002754:	b570      	push	{r4, r5, r6, lr}
 8002756:	4d0d      	ldr	r5, [pc, #52]	@ (800278c <__libc_init_array+0x38>)
 8002758:	4c0d      	ldr	r4, [pc, #52]	@ (8002790 <__libc_init_array+0x3c>)
 800275a:	1b64      	subs	r4, r4, r5
 800275c:	10a4      	asrs	r4, r4, #2
 800275e:	2600      	movs	r6, #0
 8002760:	42a6      	cmp	r6, r4
 8002762:	d109      	bne.n	8002778 <__libc_init_array+0x24>
 8002764:	4d0b      	ldr	r5, [pc, #44]	@ (8002794 <__libc_init_array+0x40>)
 8002766:	4c0c      	ldr	r4, [pc, #48]	@ (8002798 <__libc_init_array+0x44>)
 8002768:	f000 fc64 	bl	8003034 <_init>
 800276c:	1b64      	subs	r4, r4, r5
 800276e:	10a4      	asrs	r4, r4, #2
 8002770:	2600      	movs	r6, #0
 8002772:	42a6      	cmp	r6, r4
 8002774:	d105      	bne.n	8002782 <__libc_init_array+0x2e>
 8002776:	bd70      	pop	{r4, r5, r6, pc}
 8002778:	f855 3b04 	ldr.w	r3, [r5], #4
 800277c:	4798      	blx	r3
 800277e:	3601      	adds	r6, #1
 8002780:	e7ee      	b.n	8002760 <__libc_init_array+0xc>
 8002782:	f855 3b04 	ldr.w	r3, [r5], #4
 8002786:	4798      	blx	r3
 8002788:	3601      	adds	r6, #1
 800278a:	e7f2      	b.n	8002772 <__libc_init_array+0x1e>
 800278c:	0800329c 	.word	0x0800329c
 8002790:	0800329c 	.word	0x0800329c
 8002794:	0800329c 	.word	0x0800329c
 8002798:	080032a0 	.word	0x080032a0

0800279c <__retarget_lock_acquire_recursive>:
 800279c:	4770      	bx	lr

0800279e <__retarget_lock_release_recursive>:
 800279e:	4770      	bx	lr

080027a0 <__ssputs_r>:
 80027a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027a4:	688e      	ldr	r6, [r1, #8]
 80027a6:	461f      	mov	r7, r3
 80027a8:	42be      	cmp	r6, r7
 80027aa:	680b      	ldr	r3, [r1, #0]
 80027ac:	4682      	mov	sl, r0
 80027ae:	460c      	mov	r4, r1
 80027b0:	4690      	mov	r8, r2
 80027b2:	d82d      	bhi.n	8002810 <__ssputs_r+0x70>
 80027b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80027b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80027bc:	d026      	beq.n	800280c <__ssputs_r+0x6c>
 80027be:	6965      	ldr	r5, [r4, #20]
 80027c0:	6909      	ldr	r1, [r1, #16]
 80027c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027c6:	eba3 0901 	sub.w	r9, r3, r1
 80027ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80027ce:	1c7b      	adds	r3, r7, #1
 80027d0:	444b      	add	r3, r9
 80027d2:	106d      	asrs	r5, r5, #1
 80027d4:	429d      	cmp	r5, r3
 80027d6:	bf38      	it	cc
 80027d8:	461d      	movcc	r5, r3
 80027da:	0553      	lsls	r3, r2, #21
 80027dc:	d527      	bpl.n	800282e <__ssputs_r+0x8e>
 80027de:	4629      	mov	r1, r5
 80027e0:	f000 f958 	bl	8002a94 <_malloc_r>
 80027e4:	4606      	mov	r6, r0
 80027e6:	b360      	cbz	r0, 8002842 <__ssputs_r+0xa2>
 80027e8:	6921      	ldr	r1, [r4, #16]
 80027ea:	464a      	mov	r2, r9
 80027ec:	f000 fbc2 	bl	8002f74 <memcpy>
 80027f0:	89a3      	ldrh	r3, [r4, #12]
 80027f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80027f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027fa:	81a3      	strh	r3, [r4, #12]
 80027fc:	6126      	str	r6, [r4, #16]
 80027fe:	6165      	str	r5, [r4, #20]
 8002800:	444e      	add	r6, r9
 8002802:	eba5 0509 	sub.w	r5, r5, r9
 8002806:	6026      	str	r6, [r4, #0]
 8002808:	60a5      	str	r5, [r4, #8]
 800280a:	463e      	mov	r6, r7
 800280c:	42be      	cmp	r6, r7
 800280e:	d900      	bls.n	8002812 <__ssputs_r+0x72>
 8002810:	463e      	mov	r6, r7
 8002812:	6820      	ldr	r0, [r4, #0]
 8002814:	4632      	mov	r2, r6
 8002816:	4641      	mov	r1, r8
 8002818:	f000 fb82 	bl	8002f20 <memmove>
 800281c:	68a3      	ldr	r3, [r4, #8]
 800281e:	1b9b      	subs	r3, r3, r6
 8002820:	60a3      	str	r3, [r4, #8]
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	4433      	add	r3, r6
 8002826:	6023      	str	r3, [r4, #0]
 8002828:	2000      	movs	r0, #0
 800282a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800282e:	462a      	mov	r2, r5
 8002830:	f000 fb48 	bl	8002ec4 <_realloc_r>
 8002834:	4606      	mov	r6, r0
 8002836:	2800      	cmp	r0, #0
 8002838:	d1e0      	bne.n	80027fc <__ssputs_r+0x5c>
 800283a:	6921      	ldr	r1, [r4, #16]
 800283c:	4650      	mov	r0, sl
 800283e:	f000 fba7 	bl	8002f90 <_free_r>
 8002842:	230c      	movs	r3, #12
 8002844:	f8ca 3000 	str.w	r3, [sl]
 8002848:	89a3      	ldrh	r3, [r4, #12]
 800284a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800284e:	81a3      	strh	r3, [r4, #12]
 8002850:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002854:	e7e9      	b.n	800282a <__ssputs_r+0x8a>
	...

08002858 <_svfiprintf_r>:
 8002858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800285c:	4698      	mov	r8, r3
 800285e:	898b      	ldrh	r3, [r1, #12]
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	b09d      	sub	sp, #116	@ 0x74
 8002864:	4607      	mov	r7, r0
 8002866:	460d      	mov	r5, r1
 8002868:	4614      	mov	r4, r2
 800286a:	d510      	bpl.n	800288e <_svfiprintf_r+0x36>
 800286c:	690b      	ldr	r3, [r1, #16]
 800286e:	b973      	cbnz	r3, 800288e <_svfiprintf_r+0x36>
 8002870:	2140      	movs	r1, #64	@ 0x40
 8002872:	f000 f90f 	bl	8002a94 <_malloc_r>
 8002876:	6028      	str	r0, [r5, #0]
 8002878:	6128      	str	r0, [r5, #16]
 800287a:	b930      	cbnz	r0, 800288a <_svfiprintf_r+0x32>
 800287c:	230c      	movs	r3, #12
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002884:	b01d      	add	sp, #116	@ 0x74
 8002886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800288a:	2340      	movs	r3, #64	@ 0x40
 800288c:	616b      	str	r3, [r5, #20]
 800288e:	2300      	movs	r3, #0
 8002890:	9309      	str	r3, [sp, #36]	@ 0x24
 8002892:	2320      	movs	r3, #32
 8002894:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002898:	f8cd 800c 	str.w	r8, [sp, #12]
 800289c:	2330      	movs	r3, #48	@ 0x30
 800289e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002a3c <_svfiprintf_r+0x1e4>
 80028a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80028a6:	f04f 0901 	mov.w	r9, #1
 80028aa:	4623      	mov	r3, r4
 80028ac:	469a      	mov	sl, r3
 80028ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028b2:	b10a      	cbz	r2, 80028b8 <_svfiprintf_r+0x60>
 80028b4:	2a25      	cmp	r2, #37	@ 0x25
 80028b6:	d1f9      	bne.n	80028ac <_svfiprintf_r+0x54>
 80028b8:	ebba 0b04 	subs.w	fp, sl, r4
 80028bc:	d00b      	beq.n	80028d6 <_svfiprintf_r+0x7e>
 80028be:	465b      	mov	r3, fp
 80028c0:	4622      	mov	r2, r4
 80028c2:	4629      	mov	r1, r5
 80028c4:	4638      	mov	r0, r7
 80028c6:	f7ff ff6b 	bl	80027a0 <__ssputs_r>
 80028ca:	3001      	adds	r0, #1
 80028cc:	f000 80a7 	beq.w	8002a1e <_svfiprintf_r+0x1c6>
 80028d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80028d2:	445a      	add	r2, fp
 80028d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80028d6:	f89a 3000 	ldrb.w	r3, [sl]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 809f 	beq.w	8002a1e <_svfiprintf_r+0x1c6>
 80028e0:	2300      	movs	r3, #0
 80028e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028ea:	f10a 0a01 	add.w	sl, sl, #1
 80028ee:	9304      	str	r3, [sp, #16]
 80028f0:	9307      	str	r3, [sp, #28]
 80028f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80028f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80028f8:	4654      	mov	r4, sl
 80028fa:	2205      	movs	r2, #5
 80028fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002900:	484e      	ldr	r0, [pc, #312]	@ (8002a3c <_svfiprintf_r+0x1e4>)
 8002902:	f7fd fc8d 	bl	8000220 <memchr>
 8002906:	9a04      	ldr	r2, [sp, #16]
 8002908:	b9d8      	cbnz	r0, 8002942 <_svfiprintf_r+0xea>
 800290a:	06d0      	lsls	r0, r2, #27
 800290c:	bf44      	itt	mi
 800290e:	2320      	movmi	r3, #32
 8002910:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002914:	0711      	lsls	r1, r2, #28
 8002916:	bf44      	itt	mi
 8002918:	232b      	movmi	r3, #43	@ 0x2b
 800291a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800291e:	f89a 3000 	ldrb.w	r3, [sl]
 8002922:	2b2a      	cmp	r3, #42	@ 0x2a
 8002924:	d015      	beq.n	8002952 <_svfiprintf_r+0xfa>
 8002926:	9a07      	ldr	r2, [sp, #28]
 8002928:	4654      	mov	r4, sl
 800292a:	2000      	movs	r0, #0
 800292c:	f04f 0c0a 	mov.w	ip, #10
 8002930:	4621      	mov	r1, r4
 8002932:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002936:	3b30      	subs	r3, #48	@ 0x30
 8002938:	2b09      	cmp	r3, #9
 800293a:	d94b      	bls.n	80029d4 <_svfiprintf_r+0x17c>
 800293c:	b1b0      	cbz	r0, 800296c <_svfiprintf_r+0x114>
 800293e:	9207      	str	r2, [sp, #28]
 8002940:	e014      	b.n	800296c <_svfiprintf_r+0x114>
 8002942:	eba0 0308 	sub.w	r3, r0, r8
 8002946:	fa09 f303 	lsl.w	r3, r9, r3
 800294a:	4313      	orrs	r3, r2
 800294c:	9304      	str	r3, [sp, #16]
 800294e:	46a2      	mov	sl, r4
 8002950:	e7d2      	b.n	80028f8 <_svfiprintf_r+0xa0>
 8002952:	9b03      	ldr	r3, [sp, #12]
 8002954:	1d19      	adds	r1, r3, #4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	9103      	str	r1, [sp, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	bfbb      	ittet	lt
 800295e:	425b      	neglt	r3, r3
 8002960:	f042 0202 	orrlt.w	r2, r2, #2
 8002964:	9307      	strge	r3, [sp, #28]
 8002966:	9307      	strlt	r3, [sp, #28]
 8002968:	bfb8      	it	lt
 800296a:	9204      	strlt	r2, [sp, #16]
 800296c:	7823      	ldrb	r3, [r4, #0]
 800296e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002970:	d10a      	bne.n	8002988 <_svfiprintf_r+0x130>
 8002972:	7863      	ldrb	r3, [r4, #1]
 8002974:	2b2a      	cmp	r3, #42	@ 0x2a
 8002976:	d132      	bne.n	80029de <_svfiprintf_r+0x186>
 8002978:	9b03      	ldr	r3, [sp, #12]
 800297a:	1d1a      	adds	r2, r3, #4
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	9203      	str	r2, [sp, #12]
 8002980:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002984:	3402      	adds	r4, #2
 8002986:	9305      	str	r3, [sp, #20]
 8002988:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002a4c <_svfiprintf_r+0x1f4>
 800298c:	7821      	ldrb	r1, [r4, #0]
 800298e:	2203      	movs	r2, #3
 8002990:	4650      	mov	r0, sl
 8002992:	f7fd fc45 	bl	8000220 <memchr>
 8002996:	b138      	cbz	r0, 80029a8 <_svfiprintf_r+0x150>
 8002998:	9b04      	ldr	r3, [sp, #16]
 800299a:	eba0 000a 	sub.w	r0, r0, sl
 800299e:	2240      	movs	r2, #64	@ 0x40
 80029a0:	4082      	lsls	r2, r0
 80029a2:	4313      	orrs	r3, r2
 80029a4:	3401      	adds	r4, #1
 80029a6:	9304      	str	r3, [sp, #16]
 80029a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029ac:	4824      	ldr	r0, [pc, #144]	@ (8002a40 <_svfiprintf_r+0x1e8>)
 80029ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80029b2:	2206      	movs	r2, #6
 80029b4:	f7fd fc34 	bl	8000220 <memchr>
 80029b8:	2800      	cmp	r0, #0
 80029ba:	d036      	beq.n	8002a2a <_svfiprintf_r+0x1d2>
 80029bc:	4b21      	ldr	r3, [pc, #132]	@ (8002a44 <_svfiprintf_r+0x1ec>)
 80029be:	bb1b      	cbnz	r3, 8002a08 <_svfiprintf_r+0x1b0>
 80029c0:	9b03      	ldr	r3, [sp, #12]
 80029c2:	3307      	adds	r3, #7
 80029c4:	f023 0307 	bic.w	r3, r3, #7
 80029c8:	3308      	adds	r3, #8
 80029ca:	9303      	str	r3, [sp, #12]
 80029cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80029ce:	4433      	add	r3, r6
 80029d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80029d2:	e76a      	b.n	80028aa <_svfiprintf_r+0x52>
 80029d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80029d8:	460c      	mov	r4, r1
 80029da:	2001      	movs	r0, #1
 80029dc:	e7a8      	b.n	8002930 <_svfiprintf_r+0xd8>
 80029de:	2300      	movs	r3, #0
 80029e0:	3401      	adds	r4, #1
 80029e2:	9305      	str	r3, [sp, #20]
 80029e4:	4619      	mov	r1, r3
 80029e6:	f04f 0c0a 	mov.w	ip, #10
 80029ea:	4620      	mov	r0, r4
 80029ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029f0:	3a30      	subs	r2, #48	@ 0x30
 80029f2:	2a09      	cmp	r2, #9
 80029f4:	d903      	bls.n	80029fe <_svfiprintf_r+0x1a6>
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0c6      	beq.n	8002988 <_svfiprintf_r+0x130>
 80029fa:	9105      	str	r1, [sp, #20]
 80029fc:	e7c4      	b.n	8002988 <_svfiprintf_r+0x130>
 80029fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a02:	4604      	mov	r4, r0
 8002a04:	2301      	movs	r3, #1
 8002a06:	e7f0      	b.n	80029ea <_svfiprintf_r+0x192>
 8002a08:	ab03      	add	r3, sp, #12
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	462a      	mov	r2, r5
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a48 <_svfiprintf_r+0x1f0>)
 8002a10:	a904      	add	r1, sp, #16
 8002a12:	4638      	mov	r0, r7
 8002a14:	f3af 8000 	nop.w
 8002a18:	1c42      	adds	r2, r0, #1
 8002a1a:	4606      	mov	r6, r0
 8002a1c:	d1d6      	bne.n	80029cc <_svfiprintf_r+0x174>
 8002a1e:	89ab      	ldrh	r3, [r5, #12]
 8002a20:	065b      	lsls	r3, r3, #25
 8002a22:	f53f af2d 	bmi.w	8002880 <_svfiprintf_r+0x28>
 8002a26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002a28:	e72c      	b.n	8002884 <_svfiprintf_r+0x2c>
 8002a2a:	ab03      	add	r3, sp, #12
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	462a      	mov	r2, r5
 8002a30:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <_svfiprintf_r+0x1f0>)
 8002a32:	a904      	add	r1, sp, #16
 8002a34:	4638      	mov	r0, r7
 8002a36:	f000 f91b 	bl	8002c70 <_printf_i>
 8002a3a:	e7ed      	b.n	8002a18 <_svfiprintf_r+0x1c0>
 8002a3c:	08003261 	.word	0x08003261
 8002a40:	0800326b 	.word	0x0800326b
 8002a44:	00000000 	.word	0x00000000
 8002a48:	080027a1 	.word	0x080027a1
 8002a4c:	08003267 	.word	0x08003267

08002a50 <sbrk_aligned>:
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	4e0f      	ldr	r6, [pc, #60]	@ (8002a90 <sbrk_aligned+0x40>)
 8002a54:	460c      	mov	r4, r1
 8002a56:	6831      	ldr	r1, [r6, #0]
 8002a58:	4605      	mov	r5, r0
 8002a5a:	b911      	cbnz	r1, 8002a62 <sbrk_aligned+0x12>
 8002a5c:	f000 fa7a 	bl	8002f54 <_sbrk_r>
 8002a60:	6030      	str	r0, [r6, #0]
 8002a62:	4621      	mov	r1, r4
 8002a64:	4628      	mov	r0, r5
 8002a66:	f000 fa75 	bl	8002f54 <_sbrk_r>
 8002a6a:	1c43      	adds	r3, r0, #1
 8002a6c:	d103      	bne.n	8002a76 <sbrk_aligned+0x26>
 8002a6e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002a72:	4620      	mov	r0, r4
 8002a74:	bd70      	pop	{r4, r5, r6, pc}
 8002a76:	1cc4      	adds	r4, r0, #3
 8002a78:	f024 0403 	bic.w	r4, r4, #3
 8002a7c:	42a0      	cmp	r0, r4
 8002a7e:	d0f8      	beq.n	8002a72 <sbrk_aligned+0x22>
 8002a80:	1a21      	subs	r1, r4, r0
 8002a82:	4628      	mov	r0, r5
 8002a84:	f000 fa66 	bl	8002f54 <_sbrk_r>
 8002a88:	3001      	adds	r0, #1
 8002a8a:	d1f2      	bne.n	8002a72 <sbrk_aligned+0x22>
 8002a8c:	e7ef      	b.n	8002a6e <sbrk_aligned+0x1e>
 8002a8e:	bf00      	nop
 8002a90:	20000204 	.word	0x20000204

08002a94 <_malloc_r>:
 8002a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a98:	1ccd      	adds	r5, r1, #3
 8002a9a:	f025 0503 	bic.w	r5, r5, #3
 8002a9e:	3508      	adds	r5, #8
 8002aa0:	2d0c      	cmp	r5, #12
 8002aa2:	bf38      	it	cc
 8002aa4:	250c      	movcc	r5, #12
 8002aa6:	2d00      	cmp	r5, #0
 8002aa8:	4606      	mov	r6, r0
 8002aaa:	db01      	blt.n	8002ab0 <_malloc_r+0x1c>
 8002aac:	42a9      	cmp	r1, r5
 8002aae:	d904      	bls.n	8002aba <_malloc_r+0x26>
 8002ab0:	230c      	movs	r3, #12
 8002ab2:	6033      	str	r3, [r6, #0]
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002aba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002b90 <_malloc_r+0xfc>
 8002abe:	f000 f9f5 	bl	8002eac <__malloc_lock>
 8002ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ac6:	461c      	mov	r4, r3
 8002ac8:	bb44      	cbnz	r4, 8002b1c <_malloc_r+0x88>
 8002aca:	4629      	mov	r1, r5
 8002acc:	4630      	mov	r0, r6
 8002ace:	f7ff ffbf 	bl	8002a50 <sbrk_aligned>
 8002ad2:	1c43      	adds	r3, r0, #1
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	d158      	bne.n	8002b8a <_malloc_r+0xf6>
 8002ad8:	f8d8 4000 	ldr.w	r4, [r8]
 8002adc:	4627      	mov	r7, r4
 8002ade:	2f00      	cmp	r7, #0
 8002ae0:	d143      	bne.n	8002b6a <_malloc_r+0xd6>
 8002ae2:	2c00      	cmp	r4, #0
 8002ae4:	d04b      	beq.n	8002b7e <_malloc_r+0xea>
 8002ae6:	6823      	ldr	r3, [r4, #0]
 8002ae8:	4639      	mov	r1, r7
 8002aea:	4630      	mov	r0, r6
 8002aec:	eb04 0903 	add.w	r9, r4, r3
 8002af0:	f000 fa30 	bl	8002f54 <_sbrk_r>
 8002af4:	4581      	cmp	r9, r0
 8002af6:	d142      	bne.n	8002b7e <_malloc_r+0xea>
 8002af8:	6821      	ldr	r1, [r4, #0]
 8002afa:	1a6d      	subs	r5, r5, r1
 8002afc:	4629      	mov	r1, r5
 8002afe:	4630      	mov	r0, r6
 8002b00:	f7ff ffa6 	bl	8002a50 <sbrk_aligned>
 8002b04:	3001      	adds	r0, #1
 8002b06:	d03a      	beq.n	8002b7e <_malloc_r+0xea>
 8002b08:	6823      	ldr	r3, [r4, #0]
 8002b0a:	442b      	add	r3, r5
 8002b0c:	6023      	str	r3, [r4, #0]
 8002b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	bb62      	cbnz	r2, 8002b70 <_malloc_r+0xdc>
 8002b16:	f8c8 7000 	str.w	r7, [r8]
 8002b1a:	e00f      	b.n	8002b3c <_malloc_r+0xa8>
 8002b1c:	6822      	ldr	r2, [r4, #0]
 8002b1e:	1b52      	subs	r2, r2, r5
 8002b20:	d420      	bmi.n	8002b64 <_malloc_r+0xd0>
 8002b22:	2a0b      	cmp	r2, #11
 8002b24:	d917      	bls.n	8002b56 <_malloc_r+0xc2>
 8002b26:	1961      	adds	r1, r4, r5
 8002b28:	42a3      	cmp	r3, r4
 8002b2a:	6025      	str	r5, [r4, #0]
 8002b2c:	bf18      	it	ne
 8002b2e:	6059      	strne	r1, [r3, #4]
 8002b30:	6863      	ldr	r3, [r4, #4]
 8002b32:	bf08      	it	eq
 8002b34:	f8c8 1000 	streq.w	r1, [r8]
 8002b38:	5162      	str	r2, [r4, r5]
 8002b3a:	604b      	str	r3, [r1, #4]
 8002b3c:	4630      	mov	r0, r6
 8002b3e:	f000 f9bb 	bl	8002eb8 <__malloc_unlock>
 8002b42:	f104 000b 	add.w	r0, r4, #11
 8002b46:	1d23      	adds	r3, r4, #4
 8002b48:	f020 0007 	bic.w	r0, r0, #7
 8002b4c:	1ac2      	subs	r2, r0, r3
 8002b4e:	bf1c      	itt	ne
 8002b50:	1a1b      	subne	r3, r3, r0
 8002b52:	50a3      	strne	r3, [r4, r2]
 8002b54:	e7af      	b.n	8002ab6 <_malloc_r+0x22>
 8002b56:	6862      	ldr	r2, [r4, #4]
 8002b58:	42a3      	cmp	r3, r4
 8002b5a:	bf0c      	ite	eq
 8002b5c:	f8c8 2000 	streq.w	r2, [r8]
 8002b60:	605a      	strne	r2, [r3, #4]
 8002b62:	e7eb      	b.n	8002b3c <_malloc_r+0xa8>
 8002b64:	4623      	mov	r3, r4
 8002b66:	6864      	ldr	r4, [r4, #4]
 8002b68:	e7ae      	b.n	8002ac8 <_malloc_r+0x34>
 8002b6a:	463c      	mov	r4, r7
 8002b6c:	687f      	ldr	r7, [r7, #4]
 8002b6e:	e7b6      	b.n	8002ade <_malloc_r+0x4a>
 8002b70:	461a      	mov	r2, r3
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	42a3      	cmp	r3, r4
 8002b76:	d1fb      	bne.n	8002b70 <_malloc_r+0xdc>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	6053      	str	r3, [r2, #4]
 8002b7c:	e7de      	b.n	8002b3c <_malloc_r+0xa8>
 8002b7e:	230c      	movs	r3, #12
 8002b80:	6033      	str	r3, [r6, #0]
 8002b82:	4630      	mov	r0, r6
 8002b84:	f000 f998 	bl	8002eb8 <__malloc_unlock>
 8002b88:	e794      	b.n	8002ab4 <_malloc_r+0x20>
 8002b8a:	6005      	str	r5, [r0, #0]
 8002b8c:	e7d6      	b.n	8002b3c <_malloc_r+0xa8>
 8002b8e:	bf00      	nop
 8002b90:	20000208 	.word	0x20000208

08002b94 <_printf_common>:
 8002b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b98:	4616      	mov	r6, r2
 8002b9a:	4698      	mov	r8, r3
 8002b9c:	688a      	ldr	r2, [r1, #8]
 8002b9e:	690b      	ldr	r3, [r1, #16]
 8002ba0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	bfb8      	it	lt
 8002ba8:	4613      	movlt	r3, r2
 8002baa:	6033      	str	r3, [r6, #0]
 8002bac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002bb0:	4607      	mov	r7, r0
 8002bb2:	460c      	mov	r4, r1
 8002bb4:	b10a      	cbz	r2, 8002bba <_printf_common+0x26>
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	6033      	str	r3, [r6, #0]
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	0699      	lsls	r1, r3, #26
 8002bbe:	bf42      	ittt	mi
 8002bc0:	6833      	ldrmi	r3, [r6, #0]
 8002bc2:	3302      	addmi	r3, #2
 8002bc4:	6033      	strmi	r3, [r6, #0]
 8002bc6:	6825      	ldr	r5, [r4, #0]
 8002bc8:	f015 0506 	ands.w	r5, r5, #6
 8002bcc:	d106      	bne.n	8002bdc <_printf_common+0x48>
 8002bce:	f104 0a19 	add.w	sl, r4, #25
 8002bd2:	68e3      	ldr	r3, [r4, #12]
 8002bd4:	6832      	ldr	r2, [r6, #0]
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	42ab      	cmp	r3, r5
 8002bda:	dc26      	bgt.n	8002c2a <_printf_common+0x96>
 8002bdc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002be0:	6822      	ldr	r2, [r4, #0]
 8002be2:	3b00      	subs	r3, #0
 8002be4:	bf18      	it	ne
 8002be6:	2301      	movne	r3, #1
 8002be8:	0692      	lsls	r2, r2, #26
 8002bea:	d42b      	bmi.n	8002c44 <_printf_common+0xb0>
 8002bec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002bf0:	4641      	mov	r1, r8
 8002bf2:	4638      	mov	r0, r7
 8002bf4:	47c8      	blx	r9
 8002bf6:	3001      	adds	r0, #1
 8002bf8:	d01e      	beq.n	8002c38 <_printf_common+0xa4>
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	6922      	ldr	r2, [r4, #16]
 8002bfe:	f003 0306 	and.w	r3, r3, #6
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	bf02      	ittt	eq
 8002c06:	68e5      	ldreq	r5, [r4, #12]
 8002c08:	6833      	ldreq	r3, [r6, #0]
 8002c0a:	1aed      	subeq	r5, r5, r3
 8002c0c:	68a3      	ldr	r3, [r4, #8]
 8002c0e:	bf0c      	ite	eq
 8002c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c14:	2500      	movne	r5, #0
 8002c16:	4293      	cmp	r3, r2
 8002c18:	bfc4      	itt	gt
 8002c1a:	1a9b      	subgt	r3, r3, r2
 8002c1c:	18ed      	addgt	r5, r5, r3
 8002c1e:	2600      	movs	r6, #0
 8002c20:	341a      	adds	r4, #26
 8002c22:	42b5      	cmp	r5, r6
 8002c24:	d11a      	bne.n	8002c5c <_printf_common+0xc8>
 8002c26:	2000      	movs	r0, #0
 8002c28:	e008      	b.n	8002c3c <_printf_common+0xa8>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	4652      	mov	r2, sl
 8002c2e:	4641      	mov	r1, r8
 8002c30:	4638      	mov	r0, r7
 8002c32:	47c8      	blx	r9
 8002c34:	3001      	adds	r0, #1
 8002c36:	d103      	bne.n	8002c40 <_printf_common+0xac>
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c40:	3501      	adds	r5, #1
 8002c42:	e7c6      	b.n	8002bd2 <_printf_common+0x3e>
 8002c44:	18e1      	adds	r1, r4, r3
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	2030      	movs	r0, #48	@ 0x30
 8002c4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002c4e:	4422      	add	r2, r4
 8002c50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002c54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002c58:	3302      	adds	r3, #2
 8002c5a:	e7c7      	b.n	8002bec <_printf_common+0x58>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	4622      	mov	r2, r4
 8002c60:	4641      	mov	r1, r8
 8002c62:	4638      	mov	r0, r7
 8002c64:	47c8      	blx	r9
 8002c66:	3001      	adds	r0, #1
 8002c68:	d0e6      	beq.n	8002c38 <_printf_common+0xa4>
 8002c6a:	3601      	adds	r6, #1
 8002c6c:	e7d9      	b.n	8002c22 <_printf_common+0x8e>
	...

08002c70 <_printf_i>:
 8002c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c74:	7e0f      	ldrb	r7, [r1, #24]
 8002c76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002c78:	2f78      	cmp	r7, #120	@ 0x78
 8002c7a:	4691      	mov	r9, r2
 8002c7c:	4680      	mov	r8, r0
 8002c7e:	460c      	mov	r4, r1
 8002c80:	469a      	mov	sl, r3
 8002c82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002c86:	d807      	bhi.n	8002c98 <_printf_i+0x28>
 8002c88:	2f62      	cmp	r7, #98	@ 0x62
 8002c8a:	d80a      	bhi.n	8002ca2 <_printf_i+0x32>
 8002c8c:	2f00      	cmp	r7, #0
 8002c8e:	f000 80d1 	beq.w	8002e34 <_printf_i+0x1c4>
 8002c92:	2f58      	cmp	r7, #88	@ 0x58
 8002c94:	f000 80b8 	beq.w	8002e08 <_printf_i+0x198>
 8002c98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002ca0:	e03a      	b.n	8002d18 <_printf_i+0xa8>
 8002ca2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002ca6:	2b15      	cmp	r3, #21
 8002ca8:	d8f6      	bhi.n	8002c98 <_printf_i+0x28>
 8002caa:	a101      	add	r1, pc, #4	@ (adr r1, 8002cb0 <_printf_i+0x40>)
 8002cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002cb0:	08002d09 	.word	0x08002d09
 8002cb4:	08002d1d 	.word	0x08002d1d
 8002cb8:	08002c99 	.word	0x08002c99
 8002cbc:	08002c99 	.word	0x08002c99
 8002cc0:	08002c99 	.word	0x08002c99
 8002cc4:	08002c99 	.word	0x08002c99
 8002cc8:	08002d1d 	.word	0x08002d1d
 8002ccc:	08002c99 	.word	0x08002c99
 8002cd0:	08002c99 	.word	0x08002c99
 8002cd4:	08002c99 	.word	0x08002c99
 8002cd8:	08002c99 	.word	0x08002c99
 8002cdc:	08002e1b 	.word	0x08002e1b
 8002ce0:	08002d47 	.word	0x08002d47
 8002ce4:	08002dd5 	.word	0x08002dd5
 8002ce8:	08002c99 	.word	0x08002c99
 8002cec:	08002c99 	.word	0x08002c99
 8002cf0:	08002e3d 	.word	0x08002e3d
 8002cf4:	08002c99 	.word	0x08002c99
 8002cf8:	08002d47 	.word	0x08002d47
 8002cfc:	08002c99 	.word	0x08002c99
 8002d00:	08002c99 	.word	0x08002c99
 8002d04:	08002ddd 	.word	0x08002ddd
 8002d08:	6833      	ldr	r3, [r6, #0]
 8002d0a:	1d1a      	adds	r2, r3, #4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6032      	str	r2, [r6, #0]
 8002d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e09c      	b.n	8002e56 <_printf_i+0x1e6>
 8002d1c:	6833      	ldr	r3, [r6, #0]
 8002d1e:	6820      	ldr	r0, [r4, #0]
 8002d20:	1d19      	adds	r1, r3, #4
 8002d22:	6031      	str	r1, [r6, #0]
 8002d24:	0606      	lsls	r6, r0, #24
 8002d26:	d501      	bpl.n	8002d2c <_printf_i+0xbc>
 8002d28:	681d      	ldr	r5, [r3, #0]
 8002d2a:	e003      	b.n	8002d34 <_printf_i+0xc4>
 8002d2c:	0645      	lsls	r5, r0, #25
 8002d2e:	d5fb      	bpl.n	8002d28 <_printf_i+0xb8>
 8002d30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002d34:	2d00      	cmp	r5, #0
 8002d36:	da03      	bge.n	8002d40 <_printf_i+0xd0>
 8002d38:	232d      	movs	r3, #45	@ 0x2d
 8002d3a:	426d      	negs	r5, r5
 8002d3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d40:	4858      	ldr	r0, [pc, #352]	@ (8002ea4 <_printf_i+0x234>)
 8002d42:	230a      	movs	r3, #10
 8002d44:	e011      	b.n	8002d6a <_printf_i+0xfa>
 8002d46:	6821      	ldr	r1, [r4, #0]
 8002d48:	6833      	ldr	r3, [r6, #0]
 8002d4a:	0608      	lsls	r0, r1, #24
 8002d4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002d50:	d402      	bmi.n	8002d58 <_printf_i+0xe8>
 8002d52:	0649      	lsls	r1, r1, #25
 8002d54:	bf48      	it	mi
 8002d56:	b2ad      	uxthmi	r5, r5
 8002d58:	2f6f      	cmp	r7, #111	@ 0x6f
 8002d5a:	4852      	ldr	r0, [pc, #328]	@ (8002ea4 <_printf_i+0x234>)
 8002d5c:	6033      	str	r3, [r6, #0]
 8002d5e:	bf14      	ite	ne
 8002d60:	230a      	movne	r3, #10
 8002d62:	2308      	moveq	r3, #8
 8002d64:	2100      	movs	r1, #0
 8002d66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002d6a:	6866      	ldr	r6, [r4, #4]
 8002d6c:	60a6      	str	r6, [r4, #8]
 8002d6e:	2e00      	cmp	r6, #0
 8002d70:	db05      	blt.n	8002d7e <_printf_i+0x10e>
 8002d72:	6821      	ldr	r1, [r4, #0]
 8002d74:	432e      	orrs	r6, r5
 8002d76:	f021 0104 	bic.w	r1, r1, #4
 8002d7a:	6021      	str	r1, [r4, #0]
 8002d7c:	d04b      	beq.n	8002e16 <_printf_i+0x1a6>
 8002d7e:	4616      	mov	r6, r2
 8002d80:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d84:	fb03 5711 	mls	r7, r3, r1, r5
 8002d88:	5dc7      	ldrb	r7, [r0, r7]
 8002d8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d8e:	462f      	mov	r7, r5
 8002d90:	42bb      	cmp	r3, r7
 8002d92:	460d      	mov	r5, r1
 8002d94:	d9f4      	bls.n	8002d80 <_printf_i+0x110>
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d10b      	bne.n	8002db2 <_printf_i+0x142>
 8002d9a:	6823      	ldr	r3, [r4, #0]
 8002d9c:	07df      	lsls	r7, r3, #31
 8002d9e:	d508      	bpl.n	8002db2 <_printf_i+0x142>
 8002da0:	6923      	ldr	r3, [r4, #16]
 8002da2:	6861      	ldr	r1, [r4, #4]
 8002da4:	4299      	cmp	r1, r3
 8002da6:	bfde      	ittt	le
 8002da8:	2330      	movle	r3, #48	@ 0x30
 8002daa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002dae:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002db2:	1b92      	subs	r2, r2, r6
 8002db4:	6122      	str	r2, [r4, #16]
 8002db6:	f8cd a000 	str.w	sl, [sp]
 8002dba:	464b      	mov	r3, r9
 8002dbc:	aa03      	add	r2, sp, #12
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	4640      	mov	r0, r8
 8002dc2:	f7ff fee7 	bl	8002b94 <_printf_common>
 8002dc6:	3001      	adds	r0, #1
 8002dc8:	d14a      	bne.n	8002e60 <_printf_i+0x1f0>
 8002dca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002dce:	b004      	add	sp, #16
 8002dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	f043 0320 	orr.w	r3, r3, #32
 8002dda:	6023      	str	r3, [r4, #0]
 8002ddc:	4832      	ldr	r0, [pc, #200]	@ (8002ea8 <_printf_i+0x238>)
 8002dde:	2778      	movs	r7, #120	@ 0x78
 8002de0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	6831      	ldr	r1, [r6, #0]
 8002de8:	061f      	lsls	r7, r3, #24
 8002dea:	f851 5b04 	ldr.w	r5, [r1], #4
 8002dee:	d402      	bmi.n	8002df6 <_printf_i+0x186>
 8002df0:	065f      	lsls	r7, r3, #25
 8002df2:	bf48      	it	mi
 8002df4:	b2ad      	uxthmi	r5, r5
 8002df6:	6031      	str	r1, [r6, #0]
 8002df8:	07d9      	lsls	r1, r3, #31
 8002dfa:	bf44      	itt	mi
 8002dfc:	f043 0320 	orrmi.w	r3, r3, #32
 8002e00:	6023      	strmi	r3, [r4, #0]
 8002e02:	b11d      	cbz	r5, 8002e0c <_printf_i+0x19c>
 8002e04:	2310      	movs	r3, #16
 8002e06:	e7ad      	b.n	8002d64 <_printf_i+0xf4>
 8002e08:	4826      	ldr	r0, [pc, #152]	@ (8002ea4 <_printf_i+0x234>)
 8002e0a:	e7e9      	b.n	8002de0 <_printf_i+0x170>
 8002e0c:	6823      	ldr	r3, [r4, #0]
 8002e0e:	f023 0320 	bic.w	r3, r3, #32
 8002e12:	6023      	str	r3, [r4, #0]
 8002e14:	e7f6      	b.n	8002e04 <_printf_i+0x194>
 8002e16:	4616      	mov	r6, r2
 8002e18:	e7bd      	b.n	8002d96 <_printf_i+0x126>
 8002e1a:	6833      	ldr	r3, [r6, #0]
 8002e1c:	6825      	ldr	r5, [r4, #0]
 8002e1e:	6961      	ldr	r1, [r4, #20]
 8002e20:	1d18      	adds	r0, r3, #4
 8002e22:	6030      	str	r0, [r6, #0]
 8002e24:	062e      	lsls	r6, r5, #24
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	d501      	bpl.n	8002e2e <_printf_i+0x1be>
 8002e2a:	6019      	str	r1, [r3, #0]
 8002e2c:	e002      	b.n	8002e34 <_printf_i+0x1c4>
 8002e2e:	0668      	lsls	r0, r5, #25
 8002e30:	d5fb      	bpl.n	8002e2a <_printf_i+0x1ba>
 8002e32:	8019      	strh	r1, [r3, #0]
 8002e34:	2300      	movs	r3, #0
 8002e36:	6123      	str	r3, [r4, #16]
 8002e38:	4616      	mov	r6, r2
 8002e3a:	e7bc      	b.n	8002db6 <_printf_i+0x146>
 8002e3c:	6833      	ldr	r3, [r6, #0]
 8002e3e:	1d1a      	adds	r2, r3, #4
 8002e40:	6032      	str	r2, [r6, #0]
 8002e42:	681e      	ldr	r6, [r3, #0]
 8002e44:	6862      	ldr	r2, [r4, #4]
 8002e46:	2100      	movs	r1, #0
 8002e48:	4630      	mov	r0, r6
 8002e4a:	f7fd f9e9 	bl	8000220 <memchr>
 8002e4e:	b108      	cbz	r0, 8002e54 <_printf_i+0x1e4>
 8002e50:	1b80      	subs	r0, r0, r6
 8002e52:	6060      	str	r0, [r4, #4]
 8002e54:	6863      	ldr	r3, [r4, #4]
 8002e56:	6123      	str	r3, [r4, #16]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e5e:	e7aa      	b.n	8002db6 <_printf_i+0x146>
 8002e60:	6923      	ldr	r3, [r4, #16]
 8002e62:	4632      	mov	r2, r6
 8002e64:	4649      	mov	r1, r9
 8002e66:	4640      	mov	r0, r8
 8002e68:	47d0      	blx	sl
 8002e6a:	3001      	adds	r0, #1
 8002e6c:	d0ad      	beq.n	8002dca <_printf_i+0x15a>
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	079b      	lsls	r3, r3, #30
 8002e72:	d413      	bmi.n	8002e9c <_printf_i+0x22c>
 8002e74:	68e0      	ldr	r0, [r4, #12]
 8002e76:	9b03      	ldr	r3, [sp, #12]
 8002e78:	4298      	cmp	r0, r3
 8002e7a:	bfb8      	it	lt
 8002e7c:	4618      	movlt	r0, r3
 8002e7e:	e7a6      	b.n	8002dce <_printf_i+0x15e>
 8002e80:	2301      	movs	r3, #1
 8002e82:	4632      	mov	r2, r6
 8002e84:	4649      	mov	r1, r9
 8002e86:	4640      	mov	r0, r8
 8002e88:	47d0      	blx	sl
 8002e8a:	3001      	adds	r0, #1
 8002e8c:	d09d      	beq.n	8002dca <_printf_i+0x15a>
 8002e8e:	3501      	adds	r5, #1
 8002e90:	68e3      	ldr	r3, [r4, #12]
 8002e92:	9903      	ldr	r1, [sp, #12]
 8002e94:	1a5b      	subs	r3, r3, r1
 8002e96:	42ab      	cmp	r3, r5
 8002e98:	dcf2      	bgt.n	8002e80 <_printf_i+0x210>
 8002e9a:	e7eb      	b.n	8002e74 <_printf_i+0x204>
 8002e9c:	2500      	movs	r5, #0
 8002e9e:	f104 0619 	add.w	r6, r4, #25
 8002ea2:	e7f5      	b.n	8002e90 <_printf_i+0x220>
 8002ea4:	08003272 	.word	0x08003272
 8002ea8:	08003283 	.word	0x08003283

08002eac <__malloc_lock>:
 8002eac:	4801      	ldr	r0, [pc, #4]	@ (8002eb4 <__malloc_lock+0x8>)
 8002eae:	f7ff bc75 	b.w	800279c <__retarget_lock_acquire_recursive>
 8002eb2:	bf00      	nop
 8002eb4:	20000200 	.word	0x20000200

08002eb8 <__malloc_unlock>:
 8002eb8:	4801      	ldr	r0, [pc, #4]	@ (8002ec0 <__malloc_unlock+0x8>)
 8002eba:	f7ff bc70 	b.w	800279e <__retarget_lock_release_recursive>
 8002ebe:	bf00      	nop
 8002ec0:	20000200 	.word	0x20000200

08002ec4 <_realloc_r>:
 8002ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ec8:	4607      	mov	r7, r0
 8002eca:	4614      	mov	r4, r2
 8002ecc:	460d      	mov	r5, r1
 8002ece:	b921      	cbnz	r1, 8002eda <_realloc_r+0x16>
 8002ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	f7ff bddd 	b.w	8002a94 <_malloc_r>
 8002eda:	b92a      	cbnz	r2, 8002ee8 <_realloc_r+0x24>
 8002edc:	f000 f858 	bl	8002f90 <_free_r>
 8002ee0:	4625      	mov	r5, r4
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ee8:	f000 f89c 	bl	8003024 <_malloc_usable_size_r>
 8002eec:	4284      	cmp	r4, r0
 8002eee:	4606      	mov	r6, r0
 8002ef0:	d802      	bhi.n	8002ef8 <_realloc_r+0x34>
 8002ef2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002ef6:	d8f4      	bhi.n	8002ee2 <_realloc_r+0x1e>
 8002ef8:	4621      	mov	r1, r4
 8002efa:	4638      	mov	r0, r7
 8002efc:	f7ff fdca 	bl	8002a94 <_malloc_r>
 8002f00:	4680      	mov	r8, r0
 8002f02:	b908      	cbnz	r0, 8002f08 <_realloc_r+0x44>
 8002f04:	4645      	mov	r5, r8
 8002f06:	e7ec      	b.n	8002ee2 <_realloc_r+0x1e>
 8002f08:	42b4      	cmp	r4, r6
 8002f0a:	4622      	mov	r2, r4
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	bf28      	it	cs
 8002f10:	4632      	movcs	r2, r6
 8002f12:	f000 f82f 	bl	8002f74 <memcpy>
 8002f16:	4629      	mov	r1, r5
 8002f18:	4638      	mov	r0, r7
 8002f1a:	f000 f839 	bl	8002f90 <_free_r>
 8002f1e:	e7f1      	b.n	8002f04 <_realloc_r+0x40>

08002f20 <memmove>:
 8002f20:	4288      	cmp	r0, r1
 8002f22:	b510      	push	{r4, lr}
 8002f24:	eb01 0402 	add.w	r4, r1, r2
 8002f28:	d902      	bls.n	8002f30 <memmove+0x10>
 8002f2a:	4284      	cmp	r4, r0
 8002f2c:	4623      	mov	r3, r4
 8002f2e:	d807      	bhi.n	8002f40 <memmove+0x20>
 8002f30:	1e43      	subs	r3, r0, #1
 8002f32:	42a1      	cmp	r1, r4
 8002f34:	d008      	beq.n	8002f48 <memmove+0x28>
 8002f36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f3e:	e7f8      	b.n	8002f32 <memmove+0x12>
 8002f40:	4402      	add	r2, r0
 8002f42:	4601      	mov	r1, r0
 8002f44:	428a      	cmp	r2, r1
 8002f46:	d100      	bne.n	8002f4a <memmove+0x2a>
 8002f48:	bd10      	pop	{r4, pc}
 8002f4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f52:	e7f7      	b.n	8002f44 <memmove+0x24>

08002f54 <_sbrk_r>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	4d06      	ldr	r5, [pc, #24]	@ (8002f70 <_sbrk_r+0x1c>)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	602b      	str	r3, [r5, #0]
 8002f60:	f7fd fd92 	bl	8000a88 <_sbrk>
 8002f64:	1c43      	adds	r3, r0, #1
 8002f66:	d102      	bne.n	8002f6e <_sbrk_r+0x1a>
 8002f68:	682b      	ldr	r3, [r5, #0]
 8002f6a:	b103      	cbz	r3, 8002f6e <_sbrk_r+0x1a>
 8002f6c:	6023      	str	r3, [r4, #0]
 8002f6e:	bd38      	pop	{r3, r4, r5, pc}
 8002f70:	2000020c 	.word	0x2000020c

08002f74 <memcpy>:
 8002f74:	440a      	add	r2, r1
 8002f76:	4291      	cmp	r1, r2
 8002f78:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8002f7c:	d100      	bne.n	8002f80 <memcpy+0xc>
 8002f7e:	4770      	bx	lr
 8002f80:	b510      	push	{r4, lr}
 8002f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f8a:	4291      	cmp	r1, r2
 8002f8c:	d1f9      	bne.n	8002f82 <memcpy+0xe>
 8002f8e:	bd10      	pop	{r4, pc}

08002f90 <_free_r>:
 8002f90:	b538      	push	{r3, r4, r5, lr}
 8002f92:	4605      	mov	r5, r0
 8002f94:	2900      	cmp	r1, #0
 8002f96:	d041      	beq.n	800301c <_free_r+0x8c>
 8002f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f9c:	1f0c      	subs	r4, r1, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bfb8      	it	lt
 8002fa2:	18e4      	addlt	r4, r4, r3
 8002fa4:	f7ff ff82 	bl	8002eac <__malloc_lock>
 8002fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8003020 <_free_r+0x90>)
 8002faa:	6813      	ldr	r3, [r2, #0]
 8002fac:	b933      	cbnz	r3, 8002fbc <_free_r+0x2c>
 8002fae:	6063      	str	r3, [r4, #4]
 8002fb0:	6014      	str	r4, [r2, #0]
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fb8:	f7ff bf7e 	b.w	8002eb8 <__malloc_unlock>
 8002fbc:	42a3      	cmp	r3, r4
 8002fbe:	d908      	bls.n	8002fd2 <_free_r+0x42>
 8002fc0:	6820      	ldr	r0, [r4, #0]
 8002fc2:	1821      	adds	r1, r4, r0
 8002fc4:	428b      	cmp	r3, r1
 8002fc6:	bf01      	itttt	eq
 8002fc8:	6819      	ldreq	r1, [r3, #0]
 8002fca:	685b      	ldreq	r3, [r3, #4]
 8002fcc:	1809      	addeq	r1, r1, r0
 8002fce:	6021      	streq	r1, [r4, #0]
 8002fd0:	e7ed      	b.n	8002fae <_free_r+0x1e>
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	b10b      	cbz	r3, 8002fdc <_free_r+0x4c>
 8002fd8:	42a3      	cmp	r3, r4
 8002fda:	d9fa      	bls.n	8002fd2 <_free_r+0x42>
 8002fdc:	6811      	ldr	r1, [r2, #0]
 8002fde:	1850      	adds	r0, r2, r1
 8002fe0:	42a0      	cmp	r0, r4
 8002fe2:	d10b      	bne.n	8002ffc <_free_r+0x6c>
 8002fe4:	6820      	ldr	r0, [r4, #0]
 8002fe6:	4401      	add	r1, r0
 8002fe8:	1850      	adds	r0, r2, r1
 8002fea:	4283      	cmp	r3, r0
 8002fec:	6011      	str	r1, [r2, #0]
 8002fee:	d1e0      	bne.n	8002fb2 <_free_r+0x22>
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	6053      	str	r3, [r2, #4]
 8002ff6:	4408      	add	r0, r1
 8002ff8:	6010      	str	r0, [r2, #0]
 8002ffa:	e7da      	b.n	8002fb2 <_free_r+0x22>
 8002ffc:	d902      	bls.n	8003004 <_free_r+0x74>
 8002ffe:	230c      	movs	r3, #12
 8003000:	602b      	str	r3, [r5, #0]
 8003002:	e7d6      	b.n	8002fb2 <_free_r+0x22>
 8003004:	6820      	ldr	r0, [r4, #0]
 8003006:	1821      	adds	r1, r4, r0
 8003008:	428b      	cmp	r3, r1
 800300a:	bf04      	itt	eq
 800300c:	6819      	ldreq	r1, [r3, #0]
 800300e:	685b      	ldreq	r3, [r3, #4]
 8003010:	6063      	str	r3, [r4, #4]
 8003012:	bf04      	itt	eq
 8003014:	1809      	addeq	r1, r1, r0
 8003016:	6021      	streq	r1, [r4, #0]
 8003018:	6054      	str	r4, [r2, #4]
 800301a:	e7ca      	b.n	8002fb2 <_free_r+0x22>
 800301c:	bd38      	pop	{r3, r4, r5, pc}
 800301e:	bf00      	nop
 8003020:	20000208 	.word	0x20000208

08003024 <_malloc_usable_size_r>:
 8003024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003028:	1f18      	subs	r0, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	bfbc      	itt	lt
 800302e:	580b      	ldrlt	r3, [r1, r0]
 8003030:	18c0      	addlt	r0, r0, r3
 8003032:	4770      	bx	lr

08003034 <_init>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	bf00      	nop
 8003038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303a:	bc08      	pop	{r3}
 800303c:	469e      	mov	lr, r3
 800303e:	4770      	bx	lr

08003040 <_fini>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	bf00      	nop
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr
